{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-bgdatalakehydrator-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_job_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Master package that starts a job and triggers child execution pipelines. Specify a job name or leave it set to \"default\". Every task belongs to the \"default\" job, so this would trigger every task to be executed. To only execute specific tasks, create a job in etl.Job and map the tasks in etl.TaskJobBridge",
				"activities": [
					{
						"name": "JobAuditStart",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[etl].[JobAuditStart]",
								"storedProcedureParameters": {
									"DataFactoryName": {
										"type": "String",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									"JobName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ds_azure_sql_etlcontrol",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "GetTaskWorklist",
						"description": "Get the list of tasks that need to be completed during this job run",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "JobAuditStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[etl].[GetTaskWorklist]",
								"storedProcedureParameters": {
									"JobAuditKey": {
										"type": "Int32",
										"value": {
											"value": "@activity('JobAuditStart').output.firstRow.JobAuditKey",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ds_azure_sql_etlcontrol",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Foreach_TaskAuditKey",
						"description": "The output of the previous activity should be a list of tasks to complete. Lookup through them, marking the task as started and then executing the work.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetTaskWorklist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetTaskWorklist').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute_pl_taskaudit_launcher",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_taskaudit_launcher",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"TaskAuditKey": {
												"value": "@item().TaskAuditKey",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "TaskAuditFailure",
									"description": "Normally errors within the prior pipeline should get caught within that same pipeline. In case of catastrophic error, however, catch any errors here and make sure to mark the TaskAudit row as failed.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute_pl_taskaudit_launcher",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[TaskAuditFailure]",
										"storedProcedureParameters": {
											"TaskAuditKey": {
												"value": {
													"value": "@item().TaskAuditKey",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_azure_sqldb_etlcontrol",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "JobAuditSuccess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Foreach_TaskAuditKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[JobAuditSuccess]",
							"storedProcedureParameters": {
								"JobAuditKey": {
									"value": {
										"value": "@activity('JobAuditStart').output.firstRow.JobAuditKey",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_sqldb_etlcontrol",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "JobAuditFailure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Foreach_TaskAuditKey",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[JobAuditFailure]",
							"storedProcedureParameters": {
								"JobAuditKey": {
									"value": {
										"value": "@activity('JobAuditStart').output.firstRow.JobAuditKey",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_sqldb_etlcontrol",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"JobName": {
						"type": "string",
						"defaultValue": "default"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azure_sql_etlcontrol')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sqldb_etlcontrol')]",
				"[concat(variables('factoryId'), '/pipelines/pl_taskaudit_launcher')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_standard_ingest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Performs the data ingestion from the source system. Optionally loads several other areas of the data lake.\n\nData can either be ingested into a transient landing area or directly into the persisted raw area.\n\nIt can also optionally be loaded into the curated area. ",
				"activities": [
					{
						"name": "Get_TaskQuery",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetLimitAuditInfo_Pre",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[etl].[GetTaskQuery]",
								"storedProcedureParameters": {
									"ETLExtractDatetime": {
										"type": "DateTime",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									},
									"TaskAuditKey": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.TaskAuditKey",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "ds_azure_sql_etlcontrol",
								"type": "DatasetReference"
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "end_audit",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SetLimitAuditInfo_Post",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[TaskAuditSuccess]",
							"storedProcedureParameters": {
								"TaskAuditKey": {
									"value": {
										"value": "@pipeline().parameters.TaskAuditKey",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_sqldb_etlcontrol",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ingest_from_source",
						"description": "based on the type of source DB, execute the proper \"Copy Data\" activity. This is not parameterized because the sink for a \"Copy Data\" activity cannot be parameterized. Execute the SetLimitAuditInfo stored proc both before and after the Copy Data activity. If this is not an incremental ADFActionKey, then this stored proc will do nothing.",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Get_TaskQuery",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('Get_Task_Info').output.firstRow.SourceType",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "SQL Server",
									"activities": [
										{
											"name": "ingest_sql_server",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"sqlReaderQuery": {
														"value": "@activity('Get_TaskQuery').output.firstRow.SourceQuery",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "ds_onprem_sqlserver_dynamic",
													"type": "DatasetReference",
													"parameters": {
														"KeyVaultSecretName": {
															"value": "@activity('Get_Task_Info').output.firstRow.SourceConnectionStringSecretName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_azure_datalake_parquet_dynamic",
													"type": "DatasetReference",
													"parameters": {
														"FileSystem": {
															"value": "@variables('DataLakeInitialContainer')",
															"type": "Expression"
														},
														"Directory": {
															"value": "@variables('DataLakeInitialFolder')",
															"type": "Expression"
														},
														"File": {
															"value": "@variables('DataLakeInitialFileName')",
															"type": "Expression"
														},
														"CompressionType": {
															"value": "@variables('DataLakeInitialFileCompressionType')",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "set_RowsCopied_sql_server",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "ingest_sql_server",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RowsCopied",
												"value": {
													"value": "@string(activity('ingest_sql_server').output.rowsCopied)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "set_RowsRead_sql_server",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "set_RowsCopied_sql_server",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RowsRead",
												"value": {
													"value": "@string(activity('ingest_sql_server').output.rowsRead)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Azure SQLDB",
									"activities": [
										{
											"name": "ingest_azure_sqldb",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@activity('Get_TaskQuery').output.firstRow.SourceQuery",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "ds_azure_sqldb_dynamic",
													"type": "DatasetReference",
													"parameters": {
														"KeyVaultSecretName": {
															"value": "@activity('Get_Task_Info').output.firstRow.SourceConnectionStringSecretName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_azure_datalake_parquet_dynamic",
													"type": "DatasetReference",
													"parameters": {
														"FileSystem": {
															"value": "@variables('DataLakeInitialContainer')",
															"type": "Expression"
														},
														"Directory": {
															"value": "@variables('DataLakeInitialFolder')",
															"type": "Expression"
														},
														"File": {
															"value": "@variables('DataLakeInitialFileName')",
															"type": "Expression"
														},
														"CompressionType": {
															"value": "@variables('DataLakeInitialFileCompressionType')",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "set_RowsCopied_azure_sqldb",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "ingest_azure_sqldb",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RowsCopied",
												"value": {
													"value": "@string(activity('ingest_azure_sqldb').output.rowsCopied)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "set_RowsRead_azure_sqldb",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "set_RowsCopied_azure_sqldb",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RowsRead",
												"value": {
													"value": "@string(activity('ingest_azure_sqldb').output.rowsRead)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Azure SQLDW",
									"activities": [
										{
											"name": "ingest_azure_sqldw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlDWSource",
													"sqlReaderQuery": {
														"value": "@activity('Get_TaskQuery').output.firstRow.SourceQuery",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "ds_azure_sqldw_dynamic",
													"type": "DatasetReference",
													"parameters": {
														"KeyVaultSecretName": {
															"value": "@activity('Get_Task_Info').output.firstRow.SourceConnectionStringSecret",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_azure_datalake_parquet_dynamic",
													"type": "DatasetReference",
													"parameters": {
														"FileSystem": {
															"value": "@variables('DataLakeInitialContainer')",
															"type": "Expression"
														},
														"Directory": {
															"value": "@variables('DataLakeInitialFolder')",
															"type": "Expression"
														},
														"File": {
															"value": "@variables('DataLakeInitialFileName')",
															"type": "Expression"
														},
														"CompressionType": {
															"value": "@variables('DataLakeInitialFileCompressionType')",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "set_RowsCopied_azure_sqldw",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "ingest_azure_sqldw",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RowsCopied",
												"value": {
													"value": "@string(activity('ingest_azure_sqldw').output.rowsCopied)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "set_RowsRead_azure_sqldw",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "set_RowsCopied_azure_sqldw",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RowsRead",
												"value": {
													"value": "@string(activity('ingest_azure_sqldw').output.rowsRead)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Azure MySQL",
									"activities": [
										{
											"name": "ingest_azure_mysql",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureMySqlSource",
													"query": {
														"value": "@activity('Get_TaskQuery').output.firstRow.SourceQuery",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "ds_azure_mysql_dynamic",
													"type": "DatasetReference",
													"parameters": {
														"KeyVaultSecretName": {
															"value": "@activity('Get_Task_Info').output.firstRow.SourceConnectionStringSecretName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_azure_datalake_parquet_dynamic",
													"type": "DatasetReference",
													"parameters": {
														"FileSystem": {
															"value": "@variables('DataLakeInitialContainer')",
															"type": "Expression"
														},
														"Directory": {
															"value": "@variables('DataLakeInitialFolder')",
															"type": "Expression"
														},
														"File": {
															"value": "@variables('DataLakeInitialFileName')",
															"type": "Expression"
														},
														"CompressionType": {
															"value": "@variables('DataLakeInitialFileCompressionType')",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "set_RowsCopied_azure_mysql",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "ingest_azure_mysql",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RowsCopied",
												"value": {
													"value": "@string(activity('ingest_azure_mysql').output.rowsCopied)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "set_RowsRead_azure_mysql",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "set_RowsCopied_azure_mysql",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RowsRead",
												"value": {
													"value": "@string(activity('ingest_azure_mysql').output.rowsRead)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Oracle",
									"activities": [
										{
											"name": "ingest_oracle",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "OracleSource",
													"oracleReaderQuery": {
														"value": "@activity('Get_TaskQuery').output.firstRow.SourceQuery",
														"type": "Expression"
													},
													"partitionOption": "None",
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "ds_onprem_oracle_dynamic",
													"type": "DatasetReference",
													"parameters": {
														"KeyVaultSecretName": {
															"value": "@activity('Get_Task_Info').output.firstRow.SourceConnectionStringSecretName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_azure_datalake_parquet_dynamic",
													"type": "DatasetReference",
													"parameters": {
														"FileSystem": {
															"value": "@variables('DataLakeInitialContainer')",
															"type": "Expression"
														},
														"Directory": {
															"value": "@variables('DataLakeInitialFolder')",
															"type": "Expression"
														},
														"File": {
															"value": "@variables('DataLakeInitialFileName')",
															"type": "Expression"
														},
														"CompressionType": {
															"value": "@variables('DataLakeInitialFileCompressionType')",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "set_RowsCopied_oracle",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "ingest_oracle",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RowsCopied",
												"value": {
													"value": "@string(activity('ingest_oracle').output.rowsCopied)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "set_RowsRead_oracle",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "set_RowsCopied_oracle",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RowsRead",
												"value": {
													"value": "@string(activity('ingest_oracle').output.rowsRead)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "MySQL",
									"activities": [
										{
											"name": "ingest_mysql",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "MySqlSource",
													"query": {
														"value": "@activity('Get_TaskQuery').output.firstRow.SourceQuery",
														"type": "Expression"
													}
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "ds_onprem_mysql_dynamic",
													"type": "DatasetReference",
													"parameters": {
														"KeyVaultSecretName": {
															"value": "@activity('Get_Task_Info').output.firstRow.SourceConnectionStringSecretName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_azure_datalake_parquet_dynamic",
													"type": "DatasetReference",
													"parameters": {
														"FileSystem": {
															"value": "@variables('DataLakeInitialContainer')",
															"type": "Expression"
														},
														"Directory": {
															"value": "@variables('DataLakeInitialFolder')",
															"type": "Expression"
														},
														"File": {
															"value": "@variables('DataLakeInitialFileName')",
															"type": "Expression"
														},
														"CompressionType": {
															"value": "@variables('DataLakeInitialFileCompressionType')",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "set_RowsCopied_mysql",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "ingest_mysql",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RowsCopied",
												"value": {
													"value": "@string(activity('ingest_mysql').output.rowsCopied)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "set_RowsRead_mysql",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "set_RowsCopied_mysql",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RowsRead",
												"value": {
													"value": "@string(activity('ingest_mysql').output.rowsRead)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "SetLimitAuditInfo_Pre",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set_DataLakeInitialContainer",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set_DataLakeInitialFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set_DataLakeInitialFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set_DataLakeInitialFileCompression",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[SetLimitAuditInfo]",
							"storedProcedureParameters": {
								"ExecutionSequence": {
									"value": "Pre",
									"type": "String"
								},
								"TaskAuditKey": {
									"value": {
										"value": "@pipeline().parameters.TaskAuditKey",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TaskKey": {
									"value": {
										"value": "@activity('Get_Task_Info').output.firstRow.TaskKey",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_sqldb_etlcontrol",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetLimitAuditInfo_Post",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "If_LandingAreaToRaw_Enabled",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[SetLimitAuditInfo]",
							"storedProcedureParameters": {
								"TaskKey": {
									"value": {
										"value": "@activity('Get_Task_Info').output.firstRow.TaskKey",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskAuditKey": {
									"value": {
										"value": "@pipeline().parameters.TaskAuditKey",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ExecutionSequence": {
									"value": "Post",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_sqldb_etlcontrol",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get_Task_Info",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[etl].[GetTaskInfo]",
								"storedProcedureParameters": {
									"TaskAuditKey": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.TaskAuditKey",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ds_azure_sql_etlcontrol",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "Set_LoadRawFromLandingZone",
						"description": "This boolean variable controls whether the package will attempt to first load a landing zone and then subsequently copy the data into the persisted raw area",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set_LoadLandingArea",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LoadRawFromLandingArea",
							"value": {
								"value": "@if(or(not(variables('LoadLandingArea')), empty(activity('Get_Task_Info').output.firstRow.PersistedRawContainer)), false, true)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set_DataLakeInitialContainer",
						"description": "This variable holds the name of the container that the data will be first placed within the data lake (either transient landing area or persisted raw)",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set_LoadRawFromLandingZone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DataLakeInitialContainer",
							"value": {
								"value": "@if(variables('LoadLandingArea'), activity('Get_Task_Info').output.firstRow.TransientLandingAreaContainer, activity('Get_Task_Info').output.firstRow.PersistedRawContainer)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set_DataLakeInitialFolder",
						"description": "This variable holds the name of the folder that the data will be first placed within the data lake (either transient landing area or persisted raw)",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set_LoadRawFromLandingZone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DataLakeInitialFolder",
							"value": {
								"value": "@if(variables('LoadLandingArea'), activity('Get_Task_Info').output.firstRow.TransientLandingAreaFolder, activity('Get_Task_Info').output.firstRow.PersistedRawFolder)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set_DataLakeInitialFileName",
						"description": "This variable holds the name of the filename that the data will be first placed within the data lake (either transient landing area or persisted raw)",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set_LoadRawFromLandingZone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DataLakeInitialFileName",
							"value": {
								"value": "@if(variables('LoadLandingArea'), activity('Get_Task_Info').output.firstRow.TransientLandingAreaFileName, activity('Get_Task_Info').output.firstRow.PersistedRawFileName)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set_DataLakeInitialFileCompression",
						"description": "This variable holds the name of the flie compression that we will use when the data is first placed within the data lake (either transient landing area or persisted raw)",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set_LoadRawFromLandingZone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DataLakeInitialFileCompressionType",
							"value": {
								"value": "@if(variables('LoadLandingArea'), activity('Get_Task_Info').output.firstRow.TransientLandingAreaFileCompressionType, activity('Get_Task_Info').output.firstRow.PersistedRawFileCompressionType)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set_LoadLandingArea",
						"description": "Sets the variable that determines whether data first hits a transient landing area or if it goes straight into a persisted raw area",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get_Task_Info",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LoadLandingArea",
							"value": {
								"value": "@if(empty(activity('Get_Task_Info').output.firstRow.TransientLandingAreaContainer), false, true)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If_LandingAreaToRaw_Enabled",
						"description": "If both the Landing Area and Persisted Raw locations have been specified, then immediately copy this data that was just landed into the raw area",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ingest_from_source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('LoadRawFromLandingArea')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "copy_landingarea_to_raw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_azure_datalake_parquet_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"FileSystem": {
													"value": "@activity('Get_Task_Info').output.firstRow.TransientLandingAreaContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@activity('Get_Task_Info').output.firstRow.TransientLandingAreaFolder",
													"type": "Expression"
												},
												"File": {
													"value": "@activity('Get_Task_Info').output.firstRow.TransientLandingAreaFileName",
													"type": "Expression"
												},
												"CompressionType": {
													"value": "@activity('Get_Task_Info').output.firstRow.TransientLandingAreaFileCompressionType",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_azure_datalake_parquet_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"FileSystem": {
													"value": "@activity('Get_Task_Info').output.firstRow.PersistedRawContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@activity('Get_Task_Info').output.firstRow.PersistedRawFolder",
													"type": "Expression"
												},
												"File": {
													"value": "@activity('Get_Task_Info').output.firstRow.PersistedRawFileName",
													"type": "Expression"
												},
												"CompressionType": {
													"value": "@activity('Get_Task_Info').output.firstRow.PersistedRawFileCompressionType",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"TaskAuditKey": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"RowsCopied": {
						"type": "String",
						"defaultValue": "0"
					},
					"RowsRead": {
						"type": "String",
						"defaultValue": "0"
					},
					"TaskKey": {
						"type": "String",
						"defaultValue": "0"
					},
					"DataLakeInitialContainer": {
						"type": "String"
					},
					"DataLakeInitialFolder": {
						"type": "String"
					},
					"DataLakeInitialFileName": {
						"type": "String"
					},
					"LoadRawFromLandingArea": {
						"type": "Boolean"
					},
					"DataLakeInitialFileCompressionType": {
						"type": "String"
					},
					"LoadLandingArea": {
						"type": "Boolean"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azure_sql_etlcontrol')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sqldb_etlcontrol')]",
				"[concat(variables('factoryId'), '/datasets/ds_azure_datalake_parquet_dynamic')]",
				"[concat(variables('factoryId'), '/datasets/ds_onprem_sqlserver_dynamic')]",
				"[concat(variables('factoryId'), '/datasets/ds_azure_sqldb_dynamic')]",
				"[concat(variables('factoryId'), '/datasets/ds_azure_sqldw_dynamic')]",
				"[concat(variables('factoryId'), '/datasets/ds_azure_mysql_dynamic')]",
				"[concat(variables('factoryId'), '/datasets/ds_onprem_oracle_dynamic')]",
				"[concat(variables('factoryId'), '/datasets/ds_onprem_mysql_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_taskaudit_launcher')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TaskAuditStart",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[etl].[TaskAuditStart]",
								"storedProcedureParameters": {
									"TaskAuditKey": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.TaskAuditKey",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "ds_azure_sql_etlcontrol",
								"type": "DatasetReference"
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "AdvancedTaskCheck",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "TaskAuditStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('TaskAuditStart').output.firstRow.IsAdvancedTask",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set_ConfigName_FalseCondition",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ConfigName",
										"value": "Standard"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set_ConfigName_TrueCondition",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ConfigName",
										"value": {
											"value": "@activity('TaskAuditStart').output.firstRow.AdvancedConfigName",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "ExecuteTaskPipeline",
						"description": "Execute either the \"Standard\" task pipeline or if this is an \"advanced\" task, then execute the pipeline that corresponds to the AdvancedConfigName assigned to the ConfigName variable",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "AdvancedTaskCheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@variables('ConfigName')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Standard",
									"activities": [
										{
											"name": "Execute_pl_standard_ingest",
											"description": "Run the standard ingestion pipeline",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_standard_ingest",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"TaskAuditKey": {
														"value": "@pipeline().parameters.TaskAuditKey",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "TaskAuditFailure",
						"description": "If the pipeline registered an error, then mark this TaskAudit row as failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteTaskPipeline",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[TaskAuditFailure]",
							"storedProcedureParameters": {
								"TaskAuditKey": {
									"value": {
										"value": "@pipeline().parameters.TaskAuditKey",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_sqldb_etlcontrol",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "TaskAuditSuccess",
						"description": "If the pipeline finished successfully, then mark this TaskAudit row as successfully complete",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteTaskPipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[TaskAuditSuccess]",
							"storedProcedureParameters": {
								"TaskAuditKey": {
									"value": {
										"value": "@pipeline().parameters.TaskAuditKey",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_sqldb_etlcontrol",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"TaskAuditKey": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"ConfigName": {
						"type": "String",
						"defaultValue": "Standard"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azure_sql_etlcontrol')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sqldb_etlcontrol')]",
				"[concat(variables('factoryId'), '/pipelines/pl_standard_ingest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azure_datalake_parquet_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ds_azure_datalake_staging_dynamic",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileSystem": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"File": {
						"type": "string"
					},
					"CompressionType": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().File",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().FileSystem",
							"type": "Expression"
						}
					},
					"compressionCodec": {
						"value": "@dataset().CompressionType",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ds_azure_datalake_staging_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azure_mysql_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_mysql_dynamic",
					"type": "LinkedServiceReference",
					"parameters": {
						"KeyVaultSecretName": {
							"value": "@dataset().KeyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"KeyVaultSecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureMySqlTable",
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_mysql_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azure_sql_etlcontrol')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sqldb_etlcontrol",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sqldb_etlcontrol')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azure_sqldb_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sqldb_dynamic",
					"type": "LinkedServiceReference",
					"parameters": {
						"KeyVaultSecretName": {
							"value": "@dataset().KeyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"KeyVaultSecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sqldb_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azure_sqldw_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sqldw_dynamic",
					"type": "LinkedServiceReference",
					"parameters": {
						"KeyVaultSecretName": {
							"value": "@dataset().KeyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"KeyVaultSecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sqldw_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_onprem_mysql_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_onprem_mysql_dynamic",
					"type": "LinkedServiceReference",
					"parameters": {
						"KeyVaultSecretName": {
							"value": "@dataset().KeyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"KeyVaultSecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onprem_mysql_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_onprem_oracle_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_onprem_oracle_dynamic",
					"type": "LinkedServiceReference",
					"parameters": {
						"KeyVaultSecretName": {
							"value": "@dataset().KeyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"KeyVaultSecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onprem_oracle_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_onprem_sqlserver_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_onprem_sqlserver_dynamic",
					"type": "LinkedServiceReference",
					"parameters": {
						"KeyVaultSecretName": {
							"value": "@dataset().KeyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"KeyVaultSecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onprem_sqlserver_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azure_datalake_staging_dynamic')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "https://stbgdatalakehydrator001.dfs.core.windows.net",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_keyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": "kv-stbgdatalakehydrator001-key"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_keyvault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azure_mysql_dynamic')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Azure MySQL database",
				"parameters": {
					"KeyVaultSecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureMySql",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_keyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().KeyVaultSecretName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_keyvault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azure_sqldb_dynamic')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Azure SQL Database",
				"parameters": {
					"KeyVaultSecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_keyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().KeyVaultSecretName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_keyvault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azure_sqldb_etlcontrol')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_keyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": "kv-etlcontrol-connstr"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_keyvault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azure_sqldw_dynamic')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Azure SQL Data Warehouse/Azure Synapse",
				"parameters": {
					"KeyVaultSecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_keyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().KeyVaultSecretName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_keyvault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_keyvault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "https://BGKeyVaultDLH.vault.azure.net/"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_onprem_mysql_dynamic')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "On-premise MySQL database",
				"parameters": {
					"KeyVaultSecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "MySql",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_keyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().KeyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "ir-onprem-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_keyvault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_onprem_oracle_dynamic')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "On-premise Oracle database",
				"parameters": {
					"KeyVaultSecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_keyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().KeyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "ir-onprem-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_keyvault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_onprem_sqlserver_dynamic')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "On-premise SQL Server database",
				"parameters": {
					"KeyVaultSecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_keyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().KeyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "ir-onprem-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_keyvault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sqlserver_scardella_sql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_keyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": "kv-samplesourcesqlauth-connstr"
					}
				},
				"connectVia": {
					"referenceName": "ir-scardella-onprem",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_keyvault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sqlserver_scardella_windows')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_keyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": "kv-sourcesystem-connstr"
					},
					"userName": "SqlServer2017\\ADFWindowsUser",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_keyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": "kv-sourcesystem-passwd"
					}
				},
				"connectVia": {
					"referenceName": "ir-scardella-onprem",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_keyvault')]"
			]
		}
	]
}