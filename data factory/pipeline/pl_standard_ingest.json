{
    "name": "pl_standard_ingest",
    "properties": {
        "activities": [
            {
                "name": "Get_TaskQuery",
                "type": "Lookup",
                "dependsOn": [
                    {
                        "activity": "SetLimitAuditInfo_Pre",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "policy": {
                    "timeout": "7.00:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "source": {
                        "type": "AzureSqlSource",
                        "sqlReaderStoredProcedureName": "[etl].[GetTaskQuery]",
                        "storedProcedureParameters": {
                            "ETLExtractDatetime": {
                                "type": "DateTime",
                                "value": {
                                    "value": "@pipeline().TriggerTime",
                                    "type": "Expression"
                                }
                            },
                            "TaskAuditKey": {
                                "type": "Int32",
                                "value": {
                                    "value": "@pipeline().parameters.TaskAuditKey",
                                    "type": "Expression"
                                }
                            },
                            "TaskKey": {
                                "type": "Int32",
                                "value": {
                                    "value": "@activity('Get_Task_Info').output.firstRow.TaskKey",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    "dataset": {
                        "referenceName": "ds_azure_sql_etlcontrol",
                        "type": "DatasetReference"
                    },
                    "firstRowOnly": true
                }
            },
            {
                "name": "end_audit",
                "type": "SqlServerStoredProcedure",
                "dependsOn": [
                    {
                        "activity": "load_raw_replica",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "policy": {
                    "timeout": "7.00:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "storedProcedureName": "[etl].[TaskAuditSuccess]",
                    "storedProcedureParameters": {
                        "TaskAuditKey": {
                            "value": {
                                "value": "@pipeline().parameters.TaskAuditKey",
                                "type": "Expression"
                            },
                            "type": "Int32"
                        }
                    }
                },
                "linkedServiceName": {
                    "referenceName": "ls_azure_sqldb_etlcontrol",
                    "type": "LinkedServiceReference"
                }
            },
            {
                "name": "copy_table_generic",
                "description": "based on the type of source DB, execute the proper \"Copy Data\" activity. This is not parameterized because the sink for a \"Copy Data\" activity cannot be parameterized. Execute the SetLimitAuditInfo stored proc both before and after the Copy Data activity. If this is not an incremental ADFActionKey, then this stored proc will do nothing.",
                "type": "Switch",
                "dependsOn": [
                    {
                        "activity": "Get_TaskQuery",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "userProperties": [],
                "typeProperties": {
                    "on": {
                        "value": "@activity('Get_Task_Info').output.firstRow.SourceType",
                        "type": "Expression"
                    },
                    "cases": [
                        {
                            "value": "SQL",
                            "activities": [
                                {
                                    "name": "copy_table_sql",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "sqlReaderQuery": {
                                                "value": "@activity('Get_TaskQuery').output.firstRow.SourceQuery",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00"
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_sqldb_wdrsreporting_dynamic",
                                            "type": "DatasetReference"
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_azure_datalake_parquet_dynamic",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FileSystem": {
                                                    "value": "@activity('Get_Task_Info').output.firstRow.TargetDataLakeContainer",
                                                    "type": "Expression"
                                                },
                                                "Directory": {
                                                    "value": "@variables('StagingFolderPath')",
                                                    "type": "Expression"
                                                },
                                                "File": {
                                                    "value": "@concat(activity('Get_Task_Info').output.firstRow.TargetDataLakeFileName, '.parquet')",
                                                    "type": "Expression"
                                                },
                                                "CompressionType": {
                                                    "value": "@activity('Get_Task_Info').output.firstRow.TargetFileCompressionType",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "set_RowsCopied_sql",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "copy_table_sql",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "RowsCopied",
                                        "value": {
                                            "value": "@string(activity('copy_table_sql').output.rowsCopied)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "set_RowsRead_sql",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "set_RowsCopied_sql",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "RowsRead",
                                        "value": {
                                            "value": "@string(activity('copy_table_sql').output.rowsRead)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "update_row_counts",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "set_RowsRead_sql",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[etl].[TaskAuditRowsUpdate]",
                                        "storedProcedureParameters": {
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@int(variables('RowsCopied'))",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@int(variables('RowsRead'))",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "TaskAuditKey": {
                                                "value": {
                                                    "value": "@pipeline().parameters.TaskAuditKey",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_azure_sqldb_etlcontrol",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        },
                        {
                            "value": "mysql",
                            "activities": [
                                {
                                    "name": "copy_table_mysql",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "MySqlSource",
                                            "query": {
                                                "value": "@activity('Get_TaskQuery').output.firstRow.SourceQuery",
                                                "type": "Expression"
                                            }
                                        },
                                        "sink": {
                                            "type": "ParquetSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_mysql_redcap_dynamic",
                                            "type": "DatasetReference"
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_azure_datalake_parquet_dynamic",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FileSystem": {
                                                    "value": "@activity('Get_Task_Info').output.firstRow.TargetDataLakeContainer",
                                                    "type": "Expression"
                                                },
                                                "Directory": {
                                                    "value": "@variables('StagingFolderPath')",
                                                    "type": "Expression"
                                                },
                                                "File": {
                                                    "value": "@concat(activity('Get_Task_Info').output.firstRow.TargetDataLakeFileName, '.parquet')",
                                                    "type": "Expression"
                                                },
                                                "CompressionType": {
                                                    "value": "@activity('Get_Task_Info').output.firstRow.TargetFileCompressionType",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "set_RowsCopied_mysql",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "copy_table_mysql",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "RowsCopied",
                                        "value": {
                                            "value": "@string(activity('copy_table_mysql').output.rowsCopied)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "set_RowsRead_mysql",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "copy_table_mysql",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "RowsRead",
                                        "value": {
                                            "value": "@string(activity('copy_table_mysql').output.rowsRead)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "update_row_counts_mysql",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "set_RowsRead_mysql",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        },
                                        {
                                            "activity": "set_RowsCopied_mysql",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[etl].[TaskAuditRowsUpdate]",
                                        "storedProcedureParameters": {
                                            "RowsCopied": {
                                                "value": {
                                                    "value": "@int(variables('RowsCopied'))",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RowsRead": {
                                                "value": {
                                                    "value": "@int(variables('RowsRead'))",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "TaskAuditKey": {
                                                "value": {
                                                    "value": "@pipeline().parameters.TaskAuditKey",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_azure_sqldb_etlcontrol",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "name": "SetLimitAuditInfo_Pre",
                "type": "SqlServerStoredProcedure",
                "dependsOn": [
                    {
                        "activity": "Set StagingFolderPath",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "policy": {
                    "timeout": "7.00:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "storedProcedureName": "[etl].[SetLimitAuditInfo]",
                    "storedProcedureParameters": {
                        "ExecutionSequence": {
                            "value": "Pre",
                            "type": "String"
                        },
                        "TaskAuditKey": {
                            "value": {
                                "value": "@pipeline().parameters.TaskAuditKey",
                                "type": "Expression"
                            },
                            "type": "Int64"
                        },
                        "TaskKey": {
                            "value": {
                                "value": "@activity('Get_Task_Info').output.firstRow.TaskKey",
                                "type": "Expression"
                            },
                            "type": "Int32"
                        }
                    }
                },
                "linkedServiceName": {
                    "referenceName": "ls_azure_sqldb_etlcontrol",
                    "type": "LinkedServiceReference"
                }
            },
            {
                "name": "SetLimitAuditInfo_Post",
                "type": "SqlServerStoredProcedure",
                "dependsOn": [
                    {
                        "activity": "copy_table_generic",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "policy": {
                    "timeout": "7.00:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "storedProcedureName": "[etl].[SetLimitAuditInfo]",
                    "storedProcedureParameters": {
                        "TaskKey": {
                            "value": {
                                "value": "@activity('Get_Task_Info').output.firstRow.TaskKey",
                                "type": "Expression"
                            },
                            "type": "Int32"
                        },
                        "TaskAuditKey": {
                            "value": {
                                "value": "@pipeline().parameters.TaskAuditKey",
                                "type": "Expression"
                            },
                            "type": "Int64"
                        },
                        "ExecutionSequence": {
                            "value": "Post",
                            "type": "String"
                        }
                    }
                },
                "linkedServiceName": {
                    "referenceName": "ls_azure_sqldb_etlcontrol",
                    "type": "LinkedServiceReference"
                }
            },
            {
                "name": "Get_Task_Info",
                "type": "Lookup",
                "dependsOn": [],
                "policy": {
                    "timeout": "7.00:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "source": {
                        "type": "AzureSqlSource",
                        "sqlReaderStoredProcedureName": "[etl].[GetTaskInfo]",
                        "storedProcedureParameters": {
                            "TaskAuditKey": {
                                "type": "Int32",
                                "value": {
                                    "value": "@pipeline().parameters.TaskAuditKey",
                                    "type": "Expression"
                                }
                            }
                        },
                        "queryTimeout": "02:00:00"
                    },
                    "dataset": {
                        "referenceName": "ds_azure_sql_etlcontrol",
                        "type": "DatasetReference"
                    }
                }
            },
            {
                "name": "Set StagingFolderPath",
                "type": "SetVariable",
                "dependsOn": [
                    {
                        "activity": "Get_Task_Info",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "userProperties": [],
                "typeProperties": {
                    "variableName": "StagingFolderPath",
                    "value": {
                        "value": "@{if(activity('Get_Task_Info').output.firstRow.IsIncrementalFlag, concat(activity('Get_Task_Info').output.firstRow.TargetDataLakeFolder, '/taskAuditID=',activity('Get_Task_Info').output.firstRow.TaskAuditKey),activity('Get_Task_Info').output.firstRow.TargetDataLakeFolder)}",
                        "type": "Expression"
                    }
                }
            },
            {
                "name": "load_raw_replica",
                "type": "IfCondition",
                "dependsOn": [
                    {
                        "activity": "SetLimitAuditInfo_Post",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "userProperties": [],
                "typeProperties": {
                    "expression": {
                        "value": "@activity('Get_Task_Info').output.firstRow.LoadRawReplica",
                        "type": "Expression"
                    },
                    "ifTrueActivities": [
                        {
                            "name": "Set StagedInputFile",
                            "type": "SetVariable",
                            "dependsOn": [],
                            "userProperties": [],
                            "typeProperties": {
                                "variableName": "StagedInputFile",
                                "value": {
                                    "value": "/mnt/datalake/@{activity('Get_Task_Info').output.firstRow.TargetDataLakeContainer}/@{variables('StagingFolderPath')}/@{activity('Get_Task_Info').output.firstRow.TargetDataLakeFileName}.parquet",
                                    "type": "Expression"
                                }
                            }
                        },
                        {
                            "name": "Load Raw Replica Dynamic",
                            "type": "DatabricksNotebook",
                            "dependsOn": [
                                {
                                    "activity": "Set StagedInputFile",
                                    "dependencyConditions": [
                                        "Succeeded"
                                    ]
                                }
                            ],
                            "policy": {
                                "timeout": "7.00:00:00",
                                "retry": 0,
                                "retryIntervalInSeconds": 30,
                                "secureOutput": false,
                                "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                                "notebookPath": "/Users/jfennessy@blue-granite.com/dev/mergeStagingData",
                                "baseParameters": {
                                    "curated_db_name": {
                                        "value": "@activity('Get_Task_Info').output.firstRow.RawReplicaDBName",
                                        "type": "Expression"
                                    },
                                    "input_file_path": {
                                        "value": "@variables('StagedInputFile')",
                                        "type": "Expression"
                                    },
                                    "key_columns": {
                                        "value": "@activity('Get_Task_Info').output.firstRow.PrimaryKeyColumnList",
                                        "type": "Expression"
                                    },
                                    "num_partitions": {
                                        "value": "@string(activity('Get_Task_Info').output.firstRow.CustomShufflePartitions)",
                                        "type": "Expression"
                                    },
                                    "table_name": {
                                        "value": "@activity('Get_Task_Info').output.firstRow.RawReplicaTableName",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "linkedServiceName": {
                                "referenceName": "ls_dbx_datalake_processing",
                                "type": "LinkedServiceReference"
                            }
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "TaskAuditKey": {
                "type": "int",
                "defaultValue": 1
            }
        },
        "variables": {
            "RowsCopied": {
                "type": "String",
                "defaultValue": "0"
            },
            "RowsRead": {
                "type": "String",
                "defaultValue": "0"
            },
            "TaskKey": {
                "type": "String",
                "defaultValue": "0"
            },
            "StagedInputFile": {
                "type": "String"
            },
            "StagingFolderPath": {
                "type": "String"
            }
        },
        "annotations": []
    },
    "type": "Microsoft.DataFactory/factories/pipelines"
}