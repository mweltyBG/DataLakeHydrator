{"version":"NotebookV1","origId":1767244527789987,"name":"Load Fact_PurchaseOrderTemporalSnapshot","language":"python","commands":[{"version":"CommandV1","origId":985877858025749,"guid":"e834c341-9cc6-47c9-992f-983850bea477","subtype":"command","commandType":"auto","position":26.5,"command":"# From the incoming data, drop rows that are already in the fact table \n# (Key_Hash matches) but nothing has changed (Row_Value_Hash also matches)\n# These do not need to get inserted into the fact table/\n# Once this step completes, the remaining rows in the dataframe should represent only new rows or changed rows, and it is safe to insert these directly into the fact table now.\n\nfinalWithRedundantRowsDroppedDF = finalDF.alias(\"staging\") \\\n  .join(activeRowsDF.alias(\"fact\"), finalDF.Key_Hash == activeRowsDF.Key_Hash, how=\"leftouter\") \\\n  .filter(isnull(activeRowsDF.Key_Hash) | (finalDF.Row_Value_Hash != activeRowsDF.Row_Value_Hash)) \\\n  .select(\"staging.*\")","commandVersion":162,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"finalWithRedundantRowsDroppedDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Ordered_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Received_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Canceled_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Merchandising_Unit_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Ordered_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Received_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Canceled_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Purchase_Order_Total_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Transaction_Link_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"PO_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Line_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Market_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Division_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Origin_Type","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Number","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Status","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Line_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"Merchandising_Class_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"IC_Priority_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Accessories_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Special_Order_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Number","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Status_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Ship_Complete_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Electronic_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Processed_Through_EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Freight_Free_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Corporate_Acc_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"JIT_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Forecast_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Direct_Paid_After_Receipt","nullable":false,"type":"string"},{"metadata":{},"name":"Snapshot_StartDate","nullable":false,"type":"date"},{"metadata":{},"name":"Employee_Entered_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Location_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Shipper_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Shipping_Origin_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_History_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"PO_Create_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Transmitted_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Acknowledge_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Drop_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Estimated_Ship_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Origin_Port_Departure_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"US_Port_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Depot_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Arrive_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Cancel_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Changed_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Key_Hash","nullable":true,"type":"string"},{"metadata":{},"name":"Row_Value_Hash","nullable":true,"type":"string"},{"metadata":{},"name":"ETLBatchID_Insert","nullable":false,"type":"string"},{"metadata":{},"name":"ETLBatchID_Update","nullable":false,"type":"string"},{"metadata":{},"name":"Snapshot_EndDate","nullable":true,"type":"date"},{"metadata":{},"name":"Snapshot_Current_Flag","nullable":false,"type":"integer"},{"metadata":{},"name":"SourceSystem_fk","nullable":false,"type":"integer"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":"Command skipped","error":null,"workflows":[],"startTime":1585518575188,"submitTime":1585518315434,"finishTime":1585518575292,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"241224ea-32f5-4819-9f54-cbefcc74c0fa"},{"version":"CommandV1","origId":1961810187579299,"guid":"e5dfa9b6-2339-41b3-815e-ef5a4a0e24d6","subtype":"command","commandType":"auto","position":1.5,"command":"#masterProcessNumber = getArgument(\"MasterProcessNumber\", \"-1\")\n\n#Creates and sets the widgets and variables used later on in the notebook.\ndbutils.widgets.text(\"MasterProcessNumber\", \"0\")\nmasterProcessNumber = dbutils.widgets.get(\"MasterProcessNumber\")","commandVersion":9,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{"MasterProcessNumber":"0"},"addedWidgets":{"MasterProcessNumber":{"widgetType":"text","name":"MasterProcessNumber","defaultValue":"0","label":null,"options":{"widgetType":"text","validationRegex":null}}},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585518333183,"submitTime":1585518314561,"finishTime":1585518333210,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"244128d1-e700-4423-8359-7bd637bf0f5a"},{"version":"CommandV1","origId":1961810187579300,"guid":"d5789952-d0bc-4f71-a6f4-79a8e5996023","subtype":"command","commandType":"auto","position":3.0,"command":"%md\n#### Explanation:\nOur notebook starts with setting up connection information to our Data Lake in ADLS, and our Data Warehouse in Azure SQL DB.  Much of the repetive connection info would be templatized or put in a child notebook for code reuse.  ","commandVersion":1,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585518314588,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"be26836b-32a1-4938-bb94-514dbae7c0c2"},{"version":"CommandV1","origId":1961810187579301,"guid":"8cd67246-403d-4137-a73f-ac4d41e8bba3","subtype":"command","commandType":"auto","position":5.0,"command":"%run \"/Dimension Loads/Initialize Connections and Functions\"","commandVersion":2,"state":"finished","results":null,"errorSummary":"The execution of this command did not finish successfully","error":null,"workflows":[],"startTime":1585518314640,"submitTime":1585518314640,"finishTime":1585518342034,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"8a93cc2c-f8bf-4805-bc38-356760050e0e"},{"version":"CommandV1","origId":1961810187579302,"guid":"9749bc3d-0908-42f6-bdb9-33ef5243ab94","subtype":"script","commandType":"auto","position":5.071428571428571,"command":"","commandVersion":45,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">varBulkInsertTableName_Update: String = &quot;&quot;\nvarBulkInsertTableName_Insert: String = &quot;&quot;\n</div>","arguments":{"BulkInsertTableName_Insert":"","BulkInsertTableName_Update":""},"addedWidgets":{"BulkInsertTableName_Insert":{"widgetType":"text","name":"BulkInsertTableName_Insert","defaultValue":"BulkInsertSchemaName.BulkInsertTableName","label":null,"options":{"widgetType":"text","validationRegex":null}},"BulkInsertTableName_Update":{"widgetType":"text","name":"BulkInsertTableName_Update","defaultValue":"BulkInsertSchemaName.BulkInsertTableName","label":null,"options":{"widgetType":"text","validationRegex":null}}},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155000915,"submitTime":1583445734947,"finishTime":1584155004673,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0e2dd0f2-efab-466c-bda6-fe6f8f49e57b"},{"version":"CommandV1","origId":1961810187579303,"guid":"4dc81045-9347-43a9-9be1-51ae426b339e","subtype":"script","commandType":"auto","position":5.071428571428571,"command":"","commandVersion":45,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">varBulkInsertTableName_Update: String = &quot;&quot;\nvarBulkInsertTableName_Insert: String = &quot;&quot;\n</div>","arguments":{"BulkInsertTableName_Insert":"","BulkInsertTableName_Update":""},"addedWidgets":{"BulkInsertTableName_Insert":{"widgetType":"text","name":"BulkInsertTableName_Insert","defaultValue":"BulkInsertSchemaName.BulkInsertTableName","label":null,"options":{"widgetType":"text","validationRegex":null}},"BulkInsertTableName_Update":{"widgetType":"text","name":"BulkInsertTableName_Update","defaultValue":"BulkInsertSchemaName.BulkInsertTableName","label":null,"options":{"widgetType":"text","validationRegex":null}}},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584982789124,"submitTime":1583445734947,"finishTime":1584982789292,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["bc6e2cd7-6e59-46ab-852b-bfcb8c37e5d8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0e2dd0f2-efab-466c-bda6-fe6f8f49e57b"},{"version":"CommandV1","origId":1961810187579304,"guid":"0a57ae7d-7b2a-4159-a014-b28f0da2b481","subtype":"script","commandType":"auto","position":5.142857142857143,"command":"","commandVersion":159,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1583182505725,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"6ae8907f-b327-4c32-8ac3-ab4fab751ed8"},{"version":"CommandV1","origId":1961810187579305,"guid":"b21f8347-3e90-4629-834c-8e4ee2c04a81","subtype":"script","commandType":"auto","position":5.142857142857143,"command":"","commandVersion":159,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1583182505725,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["bc6e2cd7-6e59-46ab-852b-bfcb8c37e5d8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"6ae8907f-b327-4c32-8ac3-ab4fab751ed8"},{"version":"CommandV1","origId":1961810187579306,"guid":"1485cf14-4ad0-413b-aeba-f02296df48a4","subtype":"script","commandType":"auto","position":5.214285714285714,"command":"","commandVersion":44,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1583182505759,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"77b5c1d2-9294-4e38-a584-458a409a4e61"},{"version":"CommandV1","origId":1961810187579307,"guid":"ed1c510d-0449-4364-b7c1-628b59dd047d","subtype":"script","commandType":"auto","position":5.214285714285714,"command":"","commandVersion":44,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1583182505759,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["bc6e2cd7-6e59-46ab-852b-bfcb8c37e5d8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"77b5c1d2-9294-4e38-a584-458a409a4e61"},{"version":"CommandV1","origId":1961810187579308,"guid":"05a2cbe4-8616-4866-9a19-e9f6b30558af","subtype":"script","commandType":"auto","position":5.285714285714286,"command":"","commandVersion":128,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">datalake already mounted\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155004690,"submitTime":1583445477384,"finishTime":1584155007731,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"78e1a9df-8ad5-4789-aac9-1643f481ca06"},{"version":"CommandV1","origId":1961810187579309,"guid":"5b227861-026b-441c-b73b-d046e4f4117e","subtype":"script","commandType":"auto","position":5.285714285714286,"command":"","commandVersion":128,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">datalake already mounted\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584982789299,"submitTime":1583445477384,"finishTime":1584982790814,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["bc6e2cd7-6e59-46ab-852b-bfcb8c37e5d8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"78e1a9df-8ad5-4789-aac9-1643f481ca06"},{"version":"CommandV1","origId":1961810187579310,"guid":"32497ea3-a8f5-4a24-97ce-01a2b8651595","subtype":"script","commandType":"auto","position":5.357142857142857,"command":"","commandVersion":8,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155007743,"submitTime":1583184002304,"finishTime":1584155007760,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a41e51f8-4ae5-47ad-8553-e97ba62ba39a"},{"version":"CommandV1","origId":1961810187579311,"guid":"5aeaa038-be7b-454b-b03c-6e499ae91aea","subtype":"script","commandType":"auto","position":5.357142857142857,"command":"","commandVersion":8,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584982790822,"submitTime":1583184002304,"finishTime":1584982790838,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["bc6e2cd7-6e59-46ab-852b-bfcb8c37e5d8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a41e51f8-4ae5-47ad-8553-e97ba62ba39a"},{"version":"CommandV1","origId":1961810187579312,"guid":"b34913c2-e277-48a9-bc22-8047070cee97","subtype":"script","commandType":"auto","position":5.428571428571429,"command":"","commandVersion":4,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155007771,"submitTime":1583184175298,"finishTime":1584155007787,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"96082a16-a680-4a70-86bd-ba35c5c9e061"},{"version":"CommandV1","origId":1961810187579313,"guid":"d97b3a96-8868-422a-bc70-dd0b216b048f","subtype":"script","commandType":"auto","position":5.428571428571429,"command":"","commandVersion":4,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584982790844,"submitTime":1583184175298,"finishTime":1584982790857,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["bc6e2cd7-6e59-46ab-852b-bfcb8c37e5d8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"96082a16-a680-4a70-86bd-ba35c5c9e061"},{"version":"CommandV1","origId":1961810187579314,"guid":"a8947da4-2b67-420f-b69e-9da4cb51c5b9","subtype":"script","commandType":"auto","position":5.5,"command":"","commandVersion":12,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1583182505824,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5a18da5a-adc8-419e-abf6-b3180f648975"},{"version":"CommandV1","origId":1961810187579315,"guid":"6c5d3028-333b-4b73-87c3-57df0368a1a5","subtype":"script","commandType":"auto","position":5.5,"command":"","commandVersion":12,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1583182505824,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["bc6e2cd7-6e59-46ab-852b-bfcb8c37e5d8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5a18da5a-adc8-419e-abf6-b3180f648975"},{"version":"CommandV1","origId":1961810187579316,"guid":"bc790103-228d-4ac5-af45-dc24ca0c89f6","subtype":"script","commandType":"auto","position":5.571428571428571,"command":"","commandVersion":62,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155007797,"submitTime":1583520078544,"finishTime":1584155009420,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"824f6042-4c72-4085-8f08-b34bfe1843e4"},{"version":"CommandV1","origId":1961810187579317,"guid":"9f7547e2-82d6-4342-8b00-2cb1bff6202f","subtype":"script","commandType":"auto","position":5.571428571428571,"command":"","commandVersion":62,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584982790865,"submitTime":1583520078544,"finishTime":1584982792381,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["bc6e2cd7-6e59-46ab-852b-bfcb8c37e5d8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"824f6042-4c72-4085-8f08-b34bfe1843e4"},{"version":"CommandV1","origId":1961810187579318,"guid":"30e6d073-7f09-4a78-8de6-ce192d6e27e9","subtype":"script","commandType":"auto","position":5.642857142857143,"command":"","commandVersion":21,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1583182505877,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f84df5ef-bd20-4a3a-99c0-88abd8e0b1e9"},{"version":"CommandV1","origId":1961810187579319,"guid":"e7c6352e-dcac-4e27-a3ca-2ab621f67fb3","subtype":"script","commandType":"auto","position":5.642857142857143,"command":"","commandVersion":21,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1583182505877,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["bc6e2cd7-6e59-46ab-852b-bfcb8c37e5d8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f84df5ef-bd20-4a3a-99c0-88abd8e0b1e9"},{"version":"CommandV1","origId":1961810187579320,"guid":"43a21bbd-c38d-4c85-b42d-013f442b5124","subtype":"script","commandType":"auto","position":5.714285714285714,"command":"","commandVersion":14,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Out[6]: &lt;function __main__.udfMD5Python(colList)&gt;</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155009443,"submitTime":1583445498009,"finishTime":1584155009496,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2a311fb9-e8c5-4025-a331-e2bd4ff8a3ad"},{"version":"CommandV1","origId":1961810187579321,"guid":"fc216e73-7940-440d-855b-e26586b26c81","subtype":"script","commandType":"auto","position":5.714285714285714,"command":"","commandVersion":14,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Out[30]: &lt;function __main__.udfMD5Python(colList)&gt;</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584982792389,"submitTime":1583445498009,"finishTime":1584982792424,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["bc6e2cd7-6e59-46ab-852b-bfcb8c37e5d8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2a311fb9-e8c5-4025-a331-e2bd4ff8a3ad"},{"version":"CommandV1","origId":1961810187579322,"guid":"5ffc16f6-abe3-417a-bb79-6f3a66a20304","subtype":"script","commandType":"auto","position":5.785714285714286,"command":"","commandVersion":7,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Out[7]: &lt;function __main__.udfSHA1Python(colList)&gt;</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155009518,"submitTime":1583445500257,"finishTime":1584155009555,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"9b618cb3-b6d6-4317-948f-8fa3c9f0545f"},{"version":"CommandV1","origId":1961810187579323,"guid":"95b4b35e-a743-412a-be39-e202fee59c6c","subtype":"script","commandType":"auto","position":5.785714285714286,"command":"","commandVersion":7,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Out[31]: &lt;function __main__.udfSHA1Python(colList)&gt;</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584982792430,"submitTime":1583445500257,"finishTime":1584982792463,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["bc6e2cd7-6e59-46ab-852b-bfcb8c37e5d8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"9b618cb3-b6d6-4317-948f-8fa3c9f0545f"},{"version":"CommandV1","origId":1961810187579324,"guid":"cbacda4a-4f01-40a8-a79c-aad845b4081a","subtype":"script","commandType":"auto","position":5.857142857142857,"command":"","commandVersion":21,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">import com.microsoft.azure.sqldb.spark.bulkcopy.BulkCopyMetadata\nimport com.microsoft.azure.sqldb.spark.config.Config\nimport com.microsoft.azure.sqldb.spark.connect._\nbulkCopyConfig_Update: com.microsoft.azure.sqldb.spark.config.Config = com.microsoft.azure.sqldb.spark.config.ConfigBuilder$$anon$1@7e5e4e0a\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155009572,"submitTime":1583445520243,"finishTime":1584155011552,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"847b9acb-ad62-4c4b-aae3-dd046fba64a8"},{"version":"CommandV1","origId":1961810187579325,"guid":"801400b4-3a8b-4cc0-bb2c-ec285336c92f","subtype":"script","commandType":"auto","position":5.857142857142857,"command":"","commandVersion":21,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">import com.microsoft.azure.sqldb.spark.bulkcopy.BulkCopyMetadata\nimport com.microsoft.azure.sqldb.spark.config.Config\nimport com.microsoft.azure.sqldb.spark.connect._\nbulkCopyConfig_Update: com.microsoft.azure.sqldb.spark.config.Config = com.microsoft.azure.sqldb.spark.config.ConfigBuilder$$anon$1@7e5e4e0a\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584982792473,"submitTime":1583445520243,"finishTime":1584982794138,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["bc6e2cd7-6e59-46ab-852b-bfcb8c37e5d8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"847b9acb-ad62-4c4b-aae3-dd046fba64a8"},{"version":"CommandV1","origId":1961810187579326,"guid":"e2e61959-3edf-4f15-9aae-be8202a0c14c","subtype":"script","commandType":"auto","position":5.928571428571429,"command":"","commandVersion":9,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">import com.microsoft.azure.sqldb.spark.bulkcopy.BulkCopyMetadata\nimport com.microsoft.azure.sqldb.spark.config.Config\nimport com.microsoft.azure.sqldb.spark.connect._\nbulkCopyConfig_Insert: com.microsoft.azure.sqldb.spark.config.Config = com.microsoft.azure.sqldb.spark.config.ConfigBuilder$$anon$1@7e5e4e0a\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155011567,"submitTime":1583182505989,"finishTime":1584155013260,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5006de7b-8f3f-4a1a-9668-51146b582978"},{"version":"CommandV1","origId":1961810187579327,"guid":"068d5067-2ee4-4359-b0d1-92e233bdc0a5","subtype":"script","commandType":"auto","position":5.928571428571429,"command":"","commandVersion":9,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">import com.microsoft.azure.sqldb.spark.bulkcopy.BulkCopyMetadata\nimport com.microsoft.azure.sqldb.spark.config.Config\nimport com.microsoft.azure.sqldb.spark.connect._\nbulkCopyConfig_Insert: com.microsoft.azure.sqldb.spark.config.Config = com.microsoft.azure.sqldb.spark.config.ConfigBuilder$$anon$1@7e5e4e0a\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584982794150,"submitTime":1583182505989,"finishTime":1584982795813,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["bc6e2cd7-6e59-46ab-852b-bfcb8c37e5d8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5006de7b-8f3f-4a1a-9668-51146b582978"},{"version":"CommandV1","origId":1961810187579328,"guid":"528a6ea3-9305-45d7-84d4-ddfcd5143c81","subtype":"command","commandType":"auto","position":6.0,"command":"# Use the following to list out the parquet file(s) in the staging folder. Typically there should only be a single file\n#dbutils.fs.ls(\"/mnt/datalake/staging/inventory/DB203002/nohalib_tbiaivt\")","commandVersion":21,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"Command skipped","error":null,"workflows":[],"startTime":1585518342030,"submitTime":1585518314771,"finishTime":1585518342044,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b40002ae-63f8-4baf-b40d-a9084e26a9d8"},{"version":"CommandV1","origId":1961810187579330,"guid":"d4a0edd8-f162-40bf-9d9e-6f974fbd0fc1","subtype":"command","commandType":"auto","position":6.5,"command":"%md\n\n#### Read the stage parquet file into a dataframe and then immediately create a temporary view with this data","commandVersion":10,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585518314800,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"dd9fe376-2981-4131-9147-6b041a7360a6"},{"version":"CommandV1","origId":1961810187579331,"guid":"d0945c04-28db-4a9f-9a09-b03e2db2c1a9","subtype":"command","commandType":"auto","position":7.0,"command":"# The original version of this notebook used parquet files in the \"staging\" data lake.\n# However, a better method may be to used the \"curated\" data.\n# Comment out the files below once the curated table has taken its place\n\n#spark.read \\\n#   .parquet(\"/mnt/datalake/staging/purchasing/DB203002/pcrundata_tbdwpohdr\") \\\n#   .createOrReplaceTempView(\"pcrundata_tbdwpohdr\")\n\n#spark.read \\\n#   .parquet(\"/mnt/datalake/staging/purchasing/DB203002/pcrundata_tbdwpodtl\") \\\n#   .createOrReplaceTempView(\"pcrundata_tbdwpodtl\")\n\nspark.read \\\n   .parquet(\"/mnt/datalake/staging/purchasing/DB203002/pcrundata_tbdwpol002\") \\\n   .createOrReplaceTempView(\"pcrundata_tbdwpol002\")\n\nspark.read \\\n   .parquet(\"/mnt/datalake/staging/purchasing/DB203002/pcrundata_tbdwpol003\") \\\n   .createOrReplaceTempView(\"pcrundata_tbdwpol003\")\n\nspark.read \\\n   .parquet(\"/mnt/datalake/staging/purchasing/DB203002/pcrundata_tbdwpol004\") \\\n   .createOrReplaceTempView(\"pcrundata_tbdwpol004\")\n\nspark.read \\\n   .parquet(\"/mnt/datalake/staging/master data/product/DB203002/pcrundata_tbitem\") \\\n   .createOrReplaceTempView(\"pcrundata_tbitem\")\n\nspark.read \\\n   .parquet(\"/mnt/datalake/staging/master data/product/DB203002/pcrundata_tbgroup\") \\\n   .createOrReplaceTempView(\"pcrundata_tbgroup\")\n\nspark.read \\\n   .parquet(\"/mnt/datalake/staging/master data/other/DB203002/pcrundata_tborigin\") \\\n   .createOrReplaceTempView(\"pcrundata_tborigin\")\n","commandVersion":118,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"Command skipped","error":null,"workflows":[],"startTime":1585518342052,"submitTime":1585518314835,"finishTime":1585518349387,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a5b4f7d7-705b-4227-b192-8a241ac6722f"},{"version":"CommandV1","origId":1961810187579332,"guid":"5889293c-03da-482c-bcc6-bc6cc29ae644","subtype":"command","commandType":"auto","position":7.5,"command":"%md\n\n#### Query the in-memory view(s), apply transformations, and save as a new temporary view named \"Staging\"","commandVersion":26,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585518314876,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"cfe6b9c3-9f75-4012-96e8-81383a725db5"},{"version":"CommandV1","origId":1961810187579333,"guid":"37259009-6a42-48e0-9854-b0a5897e1528","subtype":"command","commandType":"auto","position":8.0,"command":"%sql\n\nCREATE OR REPLACE TEMPORARY VIEW staging AS\n\n-- the following three \"log\" tables contain an entry for each time a different date related to the PO was changed. These log tables provide a full history of the different changes\n-- for our purposes we will only be querying the latest log value. as long as this ETL is run daily, this will still provide the fact table with a history of changes to these dates\nWITH tbdwpol002 AS (\n  SELECT DISTINCT PONUM, PODIV, POPC, FIRST(PODDDATE) OVER(PARTITION BY PONUM, PODIV, POPC ORDER BY POSEQ DESC) AS PODDDATE FROM pcrundata_tbdwpol002\n), \n\ntbdwpol003 AS (\n  SELECT DISTINCT PONUM, PODIV, POPC, FIRST(POPADDATE) OVER(PARTITION BY PONUM, PODIV, POPC ORDER BY POSEQ DESC) AS POPADDATE FROM pcrundata_tbdwpol003\n)\n\n, tbdwpol004 AS (\n  SELECT DISTINCT PONUM, PODIV, POPC, FIRST(POCADDATE) OVER(PARTITION BY PONUM, PODIV, POPC ORDER BY POSEQ DESC) AS POCADDATE FROM pcrundata_tbdwpol004\n)\n\nSELECT -- count(*) as cnt\n  int(detail.POQTYORD) AS Ordered_Quantity,\n  int(detail.POQTYRCV) AS Received_Quantity,\n  int(detail.POQTYCANC) AS Canceled_Quantity,\n  detail.UNITMDSE AS Merchandising_Unit_Cost,\n  detail.POQTYORD * detail.UNITMDSE AS Ordered_Cost,\n  detail.POQTYRCV * detail.UNITMDSE AS Received_Cost,\n  detail.POQTYCANC * detail.UNITMDSE AS Canceled_Cost,\n  header.POTOTAL AS Purchase_Order_Total_Cost,\n  coalesce(int(header.PODATE), 0) AS PO_Create_Date_fk,\n  coalesce(int(header.HTRANDATE), 0) AS Transmitted_Date_fk,\n  coalesce(int(header.ACKNOWLDTE), 0) AS Acknowledge_Date_fk,\n  coalesce(int(header.DROPDATE), 0) AS Drop_Date_fk,\n  coalesce(int(header.SHIPDATE), 0) AS Estimated_Ship_Date_fk,\n  coalesce(int(date_format(tbdwpol002.PODDDATE, \"yyyyMMdd\")), 0) AS Origin_Port_Departure_Date_fk,\n  coalesce(int(date_format(tbdwpol003.POPADDATE, \"yyyyMMdd\")), 0) AS US_Port_Arrival_Date_fk,\n  coalesce(int(date_format(tbdwpol004.POCADDATE, \"yyyyMMdd\")), 0) AS Depot_Arrival_Date_fk,\n  coalesce(int(detail.ARRIVEDATE), 0) AS Arrive_Date_fk,\n  coalesce(int(header.CANCELDATE), 0) AS Cancel_Date_fk,\n  coalesce(int(detail.CHGDATE), 0) AS Changed_Date_fk,\n  string(int(header.DIV)) || RIGHT('000' || string(int(header.PC)), 3) || '-' || RIGHT('00' || string(int(header.SHIPTOLOC)), 2) AS Location_nk,\n  LPAD(RTRIM(detail.SKU), 9, '0') AS SKU_nk,\n  LPAD(RTRIM(detail.SKU), 9, '0') AS SKU_History_nk,\n  date(to_date(string(header.PODATE),'yyyyMMdd')) as SKU_History_Date,\n  header.SHIPPERID AS Shipper_nk,\n  header.PORTOFORIG AS Shipping_Origin_nk,\n  header.EMPLOYEEID AS Employee_Entered_nk,\n  -- need to get the transaction link\n  0 AS Transaction_Link_fk,\n  header.PONUM AS PO_Number_nk,\n  detail.POLINE AS PO_Line_Number_nk,\n  header.PC AS Market_nk,\n  header.div AS Division_nk,\n--  '' AS PO_Origin_Type,\n  CASE pcrundata_tborigin.TYPE\n    WHEN 'D' THEN 'Domestic'\n    WHEN 'F' THEN 'Import'\n    ELSE ''\n   END AS PO_Origin_Type,\n  header.MSTRORD AS Master_PO_Flag,\n  header.MSTPONBR AS Master_PO_Number,\n  header.POSTATUS AS PO_Status_Code,\n  CASE header.POSTATUS\n      WHEN '' THEN 'Blank'\n      WHEN '10' THEN 'Entered'\n      WHEN '15' THEN 'Print Requested'\n      WHEN '18' THEN 'Request Recap'\n      WHEN '20' THEN 'Printed'\n      WHEN '22' THEN 'RePrint Requested'\n      WHEN '24' THEN 'RePrint Done'\n      WHEN '30' THEN 'Partial Received'\n      WHEN '55' THEN 'Cancel All'\n      WHEN '97' THEN 'Closed Cancelled'\n      WHEN '98' THEN 'Deleted'\n      WHEN '99' THEN 'Closed'\n  ELSE '' END AS PO_Status,\n  detail.DTLSTATUS AS PO_Line_Status_Code,\n  detail.MDSECLASS AS Merchandising_Class_Code,\n  detail.DTLICPRTY AS IC_Priority_Code,\n  header.HDRACESSPO AS Accessories_Flag,\n  header.SPECORDER AS Special_Order_Flag,\n  header.ACKNOWLNUM AS Acknowledge_Number,\n  header.HACKNSTAT AS Acknowledge_Status_Code,\n  header.HPOE850F AS EDI_Flag,\n  header.SHPCPLTFLG AS Ship_Complete_Flag,\n  header.ELECTSENT AS Electronic_Flag,\n  header.POPRCSDEDI AS Processed_Through_EDI_Flag,\n  header.FRGTFREEFL AS Freight_Free_Flag,\n  header.CORPACCPO AS Corporate_Acc_PO_Flag,\n  header.JITFLG AS JIT_Flag,\n  header.FORECASTPO AS Forecast_PO_Flag,\n  header.DIRECTPAID AS Direct_Paid_After_Receipt,\n  current_date() AS Snapshot_Effective_Date\n\n\nFROM datalakecurated.pcrundata_tbdwpohdr header\nLEFT OUTER JOIN datalakecurated.pcrundata_tbdwpodtl detail\n  ON header.COMPANY = detail.COMPANY\n  AND header.DIV = detail.DIV\n  AND header.PC = detail.PC\n  AND header.PONUM = detail.PONUM\n\nLEFT OUTER JOIN pcrundata_tbitem\n  ON LPAD(RTRIM(detail.SKU), 9, '0') = pcrundata_tbitem.ITEM\n--AND detail.COMPANY = pcrundata_tbitem.COMPANY\n--AND detail.DIV = pcrundata_tbitem.DIV\n--AND detail.PC = pcrundata_tbitem.PC\nLEFT OUTER JOIN pcrundata_tbgroup\n  ON pcrundata_tbitem.GROUPID = pcrundata_tbgroup.GROUPID\n--AND pcrundata_tbitem.COMPANY = pcrundata_tbgroup.COMPANY\n--AND pcrundata_tbitem.DIV = pcrundata_tbgroup.DIV\n--AND pcrundata_tbitem.PC = pcrundata_tbgroup.PC\nLEFT OUTER JOIN pcrundata_tborigin\n  ON pcrundata_tbgroup.ORIGINID = pcrundata_tborigin.ORIGINID\n--  AND pcrundata_tbgroup.COMPANY = pcrundata_tborigin.COMPANY\n--  AND pcrundata_tbgroup.DIV = pcrundata_tborigin.DIV\n--  AND pcrundata_tbgroup.PC = pcrundata_tborigin.PC\n\n--LEFT OUTER JOIN pcrundata_tborigin mio ON g.miorigin = mio.originid\n--LEFT OUTER JOIN pcrundata_tborigin org ON g.originid = org.originid\n\nLEFT OUTER JOIN tbdwpol002\n  ON header.DIV = tbdwpol002.PODIV\n  AND header.PC = tbdwpol002.POPC\n  AND header.PONUM = tbdwpol002.PONUM\nLEFT OUTER JOIN tbdwpol003\n  ON header.DIV = tbdwpol003.PODIV\n  AND header.PC = tbdwpol003.POPC\n  AND header.PONUM = tbdwpol003.PONUM\nLEFT OUTER JOIN tbdwpol004\n  ON header.DIV = tbdwpol004.PODIV\n  AND header.PC = tbdwpol004.POPC\n  AND header.PONUM = tbdwpol004.PONUM\n\nWHERE int(header.PODATE) >= 20200101","commandVersion":1470,"state":"finished","results":{"type":"table","data":[],"arguments":{},"addedWidgets":{},"removedWidgets":[],"schema":[],"overflow":false,"aggData":[],"aggSchema":[],"aggOverflow":false,"aggSeriesLimitReached":false,"aggError":"","aggType":"","plotOptions":null,"isJsonSchema":true,"dbfsResultPath":null,"datasetInfos":[],"columnCustomDisplayInfos":{}},"errorSummary":"Error in SQL statement: AnalysisException: Table or view not found: pcrundata_tbdwpol002; line 4 pos 129","error":"com.databricks.backend.common.rpc.DatabricksExceptions$SQLExecutionException: org.apache.spark.sql.AnalysisException: Table or view not found: pcrundata_tbdwpol002; line 4 pos 129\n\tat org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:47)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$.org$apache$spark$sql$catalyst$analysis$Analyzer$ResolveRelations$$lookupTableFromCatalog(Analyzer.scala:749)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$.resolveRelation(Analyzer.scala:694)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$$anonfun$apply$8.applyOrElse(Analyzer.scala:730)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$$anonfun$apply$8.applyOrElse(Analyzer.scala:723)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1$$anonfun$apply$1.apply(AnalysisHelper.scala:90)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1$$anonfun$apply$1.apply(AnalysisHelper.scala:90)\n\tat org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:76)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1.apply(AnalysisHelper.scala:89)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1.apply(AnalysisHelper.scala:86)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:194)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$class.resolveOperatorsUp(AnalysisHelper.scala:86)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsUp(LogicalPlan.scala:29)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1$$anonfun$1.apply(AnalysisHelper.scala:87)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1$$anonfun$1.apply(AnalysisHelper.scala:87)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$8.apply(TreeNode.scala:353)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:207)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren(TreeNode.scala:351)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1.apply(AnalysisHelper.scala:87)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1.apply(AnalysisHelper.scala:86)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:194)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$class.resolveOperatorsUp(AnalysisHelper.scala:86)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsUp(LogicalPlan.scala:29)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1$$anonfun$1.apply(AnalysisHelper.scala:87)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1$$anonfun$1.apply(AnalysisHelper.scala:87)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$8.apply(TreeNode.scala:353)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:207)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren(TreeNode.scala:351)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1.apply(AnalysisHelper.scala:87)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1.apply(AnalysisHelper.scala:86)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:194)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$class.resolveOperatorsUp(AnalysisHelper.scala:86)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsUp(LogicalPlan.scala:29)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1$$anonfun$1.apply(AnalysisHelper.scala:87)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1$$anonfun$1.apply(AnalysisHelper.scala:87)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$8.apply(TreeNode.scala:353)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:207)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren(TreeNode.scala:351)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1.apply(AnalysisHelper.scala:87)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1.apply(AnalysisHelper.scala:86)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:194)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$class.resolveOperatorsUp(AnalysisHelper.scala:86)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsUp(LogicalPlan.scala:29)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$.apply(Analyzer.scala:723)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$.apply(Analyzer.scala:663)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:112)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:109)\n\tat scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:124)\n\tat scala.collection.immutable.List.foldLeft(List.scala:84)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:109)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:101)\n\tat scala.collection.immutable.List.foreach(List.scala:392)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:101)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.org$apache$spark$sql$catalyst$analysis$Analyzer$$executeSameContext(Analyzer.scala:137)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$CTESubstitution$$anonfun$apply$1$$anonfun$applyOrElse$15.apply(Analyzer.scala:223)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$CTESubstitution$$anonfun$apply$1$$anonfun$applyOrElse$15.apply(Analyzer.scala:221)\n\tat scala.collection.IndexedSeqOptimized$class.foldl(IndexedSeqOptimized.scala:57)\n\tat scala.collection.IndexedSeqOptimized$class.foldLeft(IndexedSeqOptimized.scala:66)\n\tat scala.collection.mutable.ArrayBuffer.foldLeft(ArrayBuffer.scala:48)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$CTESubstitution$$anonfun$apply$1.applyOrElse(Analyzer.scala:221)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$CTESubstitution$$anonfun$apply$1.applyOrElse(Analyzer.scala:219)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1$$anonfun$apply$1.apply(AnalysisHelper.scala:90)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1$$anonfun$apply$1.apply(AnalysisHelper.scala:90)\n\tat org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:76)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1.apply(AnalysisHelper.scala:89)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$$anonfun$resolveOperatorsUp$1.apply(AnalysisHelper.scala:86)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:194)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$class.resolveOperatorsUp(AnalysisHelper.scala:86)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsUp(LogicalPlan.scala:29)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$CTESubstitution$.apply(Analyzer.scala:219)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$CTESubstitution$.apply(Analyzer.scala:218)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:112)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:109)\n\tat scala.collection.IndexedSeqOptimized$class.foldl(IndexedSeqOptimized.scala:57)\n\tat scala.collection.IndexedSeqOptimized$class.foldLeft(IndexedSeqOptimized.scala:66)\n\tat scala.collection.mutable.WrappedArray.foldLeft(WrappedArray.scala:35)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:109)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:101)\n\tat scala.collection.immutable.List.foreach(List.scala:392)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:101)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.org$apache$spark$sql$catalyst$analysis$Analyzer$$executeSameContext(Analyzer.scala:137)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:131)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:103)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$executeAndTrack$1.apply(RuleExecutor.scala:80)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$executeAndTrack$1.apply(RuleExecutor.scala:80)\n\tat org.apache.spark.sql.catalyst.QueryPlanningTracker$.withTracker(QueryPlanningTracker.scala:88)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.executeAndTrack(RuleExecutor.scala:79)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$$anonfun$executeAndCheck$1.apply(Analyzer.scala:115)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$$anonfun$executeAndCheck$1.apply(Analyzer.scala:114)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.markInAnalyzer(AnalysisHelper.scala:201)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:114)\n\tat org.apache.spark.sql.execution.QueryExecution$$anonfun$analyzed$1.apply(QueryExecution.scala:86)\n\tat org.apache.spark.sql.execution.QueryExecution$$anonfun$analyzed$1.apply(QueryExecution.scala:83)\n\tat org.apache.spark.sql.catalyst.QueryPlanningTracker.measurePhase(QueryPlanningTracker.scala:111)\n\tat org.apache.spark.sql.execution.QueryExecution.analyzed$lzycompute(QueryExecution.scala:83)\n\tat org.apache.spark.sql.execution.QueryExecution.analyzed(QueryExecution.scala:83)\n\tat org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:75)\n\tat org.apache.spark.sql.execution.command.CreateViewCommand.run(views.scala:130)\n\tat org.apache.spark.sql.execution.command.ExecutedCommandExec.sideEffectResult$lzycompute(commands.scala:70)\n\tat org.apache.spark.sql.execution.command.ExecutedCommandExec.sideEffectResult(commands.scala:68)\n\tat org.apache.spark.sql.execution.command.ExecutedCommandExec.executeCollect(commands.scala:79)\n\tat org.apache.spark.sql.Dataset$$anonfun$6.apply(Dataset.scala:206)\n\tat org.apache.spark.sql.Dataset$$anonfun$6.apply(Dataset.scala:206)\n\tat org.apache.spark.sql.Dataset$$anonfun$54.apply(Dataset.scala:3492)\n\tat org.apache.spark.sql.Dataset$$anonfun$54.apply(Dataset.scala:3487)\n\tat org.apache.spark.sql.execution.SQLExecution$$anonfun$withCustomExecutionEnv$1.apply(SQLExecution.scala:113)\n\tat org.apache.spark.sql.execution.SQLExecution$.withSQLConfPropagated(SQLExecution.scala:242)\n\tat org.apache.spark.sql.execution.SQLExecution$.withCustomExecutionEnv(SQLExecution.scala:99)\n\tat org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:172)\n\tat org.apache.spark.sql.Dataset.org$apache$spark$sql$Dataset$$withAction(Dataset.scala:3487)\n\tat org.apache.spark.sql.Dataset.<init>(Dataset.scala:206)\n\tat org.apache.spark.sql.Dataset$.ofRows(Dataset.scala:90)\n\tat org.apache.spark.sql.SparkSession.sql(SparkSession.scala:696)\n\tat org.apache.spark.sql.SQLContext.sql(SQLContext.scala:716)\n\tat com.databricks.backend.daemon.driver.SQLDriverLocal$$anonfun$1.apply(SQLDriverLocal.scala:88)\n\tat com.databricks.backend.daemon.driver.SQLDriverLocal$$anonfun$1.apply(SQLDriverLocal.scala:34)\n\tat scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)\n\tat scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)\n\tat scala.collection.immutable.List.foreach(List.scala:392)\n\tat scala.collection.TraversableLike$class.map(TraversableLike.scala:234)\n\tat scala.collection.immutable.List.map(List.scala:296)\n\tat com.databricks.backend.daemon.driver.SQLDriverLocal.executeSql(SQLDriverLocal.scala:34)\n\tat com.databricks.backend.daemon.driver.SQLDriverLocal.repl(SQLDriverLocal.scala:141)\n\tat com.databricks.backend.daemon.driver.DriverLocal$$anonfun$execute$9.apply(DriverLocal.scala:396)\n\tat com.databricks.backend.daemon.driver.DriverLocal$$anonfun$execute$9.apply(DriverLocal.scala:373)\n\tat com.databricks.logging.UsageLogging$$anonfun$withAttributionContext$1.apply(UsageLogging.scala:238)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)\n\tat com.databricks.logging.UsageLogging$class.withAttributionContext(UsageLogging.scala:233)\n\tat com.databricks.backend.daemon.driver.DriverLocal.withAttributionContext(DriverLocal.scala:49)\n\tat com.databricks.logging.UsageLogging$class.withAttributionTags(UsageLogging.scala:275)\n\tat com.databricks.backend.daemon.driver.DriverLocal.withAttributionTags(DriverLocal.scala:49)\n\tat com.databricks.backend.daemon.driver.DriverLocal.execute(DriverLocal.scala:373)\n\tat com.databricks.backend.daemon.driver.DriverWrapper$$anonfun$tryExecutingCommand$2.apply(DriverWrapper.scala:644)\n\tat com.databricks.backend.daemon.driver.DriverWrapper$$anonfun$tryExecutingCommand$2.apply(DriverWrapper.scala:644)\n\tat scala.util.Try$.apply(Try.scala:192)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.tryExecutingCommand(DriverWrapper.scala:639)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.getCommandOutputAndError(DriverWrapper.scala:485)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.executeCommand(DriverWrapper.scala:597)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.runInnerLoop(DriverWrapper.scala:390)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.runInner(DriverWrapper.scala:337)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.run(DriverWrapper.scala:219)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: org.apache.spark.sql.catalyst.analysis.NoSuchTableException: Table or view 'pcrundata_tbdwpol002' not found in database 'default';\n\tat org.apache.spark.sql.hive.client.HiveClient$$anonfun$getTable$1.apply(HiveClient.scala:81)\n\tat org.apache.spark.sql.hive.client.HiveClient$$anonfun$getTable$1.apply(HiveClient.scala:81)\n\tat scala.Option.getOrElse(Option.scala:121)\n\tat org.apache.spark.sql.hive.client.HiveClient$class.getTable(HiveClient.scala:81)\n\tat org.apache.spark.sql.hive.client.PoolingHiveClient.getTable(PoolingHiveClient.scala:42)\n\tat org.apache.spark.sql.hive.HiveExternalCatalog$$anonfun$getRawTable$1.apply(HiveExternalCatalog.scala:179)\n\tat org.apache.spark.sql.hive.HiveExternalCatalog$$anonfun$getRawTable$1.apply(HiveExternalCatalog.scala:179)\n\tat org.apache.spark.sql.hive.HiveExternalCatalog$$anonfun$withClient$1$$anonfun$apply$1.apply(HiveExternalCatalog.scala:144)\n\tat org.apache.spark.sql.hive.HiveExternalCatalog.org$apache$spark$sql$hive$HiveExternalCatalog$$maybeSynchronized(HiveExternalCatalog.scala:105)\n\tat org.apache.spark.sql.hive.HiveExternalCatalog$$anonfun$withClient$1.apply(HiveExternalCatalog.scala:142)\n\tat com.databricks.backend.daemon.driver.ProgressReporter$.withStatusCode(ProgressReporter.scala:372)\n\tat com.databricks.backend.daemon.driver.ProgressReporter$.withStatusCode(ProgressReporter.scala:358)\n\tat com.databricks.spark.util.SparkDatabricksProgressReporter$.withStatusCode(ProgressReporter.scala:34)\n\tat org.apache.spark.sql.hive.HiveExternalCatalog.withClient(HiveExternalCatalog.scala:140)\n\tat org.apache.spark.sql.hive.HiveExternalCatalog.getRawTable(HiveExternalCatalog.scala:178)\n\tat org.apache.spark.sql.hive.HiveExternalCatalog$$anonfun$getTable$1.apply(HiveExternalCatalog.scala:767)\n\tat org.apache.spark.sql.hive.HiveExternalCatalog$$anonfun$getTable$1.apply(HiveExternalCatalog.scala:767)\n\tat org.apache.spark.sql.hive.HiveExternalCatalog$$anonfun$withClient$1$$anonfun$apply$1.apply(HiveExternalCatalog.scala:144)\n\tat org.apache.spark.sql.hive.HiveExternalCatalog.org$apache$spark$sql$hive$HiveExternalCatalog$$maybeSynchronized(HiveExternalCatalog.scala:105)\n\tat org.apache.spark.sql.hive.HiveExternalCatalog$$anonfun$withClient$1.apply(HiveExternalCatalog.scala:142)\n\tat com.databricks.backend.daemon.driver.ProgressReporter$.withStatusCode(ProgressReporter.scala:372)\n\tat com.databricks.backend.daemon.driver.ProgressReporter$.withStatusCode(ProgressReporter.scala:358)\n\tat com.databricks.spark.util.SparkDatabricksProgressReporter$.withStatusCode(ProgressReporter.scala:34)\n\tat org.apache.spark.sql.hive.HiveExternalCatalog.withClient(HiveExternalCatalog.scala:140)\n\tat org.apache.spark.sql.hive.HiveExternalCatalog.getTable(HiveExternalCatalog.scala:766)\n\tat org.apache.spark.sql.catalyst.catalog.ExternalCatalogWithListener.getTable(ExternalCatalogWithListener.scala:143)\n\tat org.apache.spark.sql.catalyst.catalog.SessionCatalog.lookupRelation(SessionCatalog.scala:736)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$$anonfun$org$apache$spark$sql$catalyst$analysis$Analyzer$ResolveRelations$$lookupTableFromCatalog$1.apply(Analyzer.scala:746)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$$anonfun$org$apache$spark$sql$catalyst$analysis$Analyzer$ResolveRelations$$lookupTableFromCatalog$1.apply(Analyzer.scala:746)\n\tat scala.collection.mutable.HashMap.getOrElseUpdate(HashMap.scala:79)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$.org$apache$spark$sql$catalyst$analysis$Analyzer$ResolveRelations$$lookupTableFromCatalog(Analyzer.scala:745)\n\t... 140 more\n\n\tat com.databricks.backend.daemon.driver.SQLDriverLocal.executeSql(SQLDriverLocal.scala:126)\n\tat com.databricks.backend.daemon.driver.SQLDriverLocal.repl(SQLDriverLocal.scala:141)\n\tat com.databricks.backend.daemon.driver.DriverLocal$$anonfun$execute$9.apply(DriverLocal.scala:396)\n\tat com.databricks.backend.daemon.driver.DriverLocal$$anonfun$execute$9.apply(DriverLocal.scala:373)\n\tat com.databricks.logging.UsageLogging$$anonfun$withAttributionContext$1.apply(UsageLogging.scala:238)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)\n\tat com.databricks.logging.UsageLogging$class.withAttributionContext(UsageLogging.scala:233)\n\tat com.databricks.backend.daemon.driver.DriverLocal.withAttributionContext(DriverLocal.scala:49)\n\tat com.databricks.logging.UsageLogging$class.withAttributionTags(UsageLogging.scala:275)\n\tat com.databricks.backend.daemon.driver.DriverLocal.withAttributionTags(DriverLocal.scala:49)\n\tat com.databricks.backend.daemon.driver.DriverLocal.execute(DriverLocal.scala:373)\n\tat com.databricks.backend.daemon.driver.DriverWrapper$$anonfun$tryExecutingCommand$2.apply(DriverWrapper.scala:644)\n\tat com.databricks.backend.daemon.driver.DriverWrapper$$anonfun$tryExecutingCommand$2.apply(DriverWrapper.scala:644)\n\tat scala.util.Try$.apply(Try.scala:192)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.tryExecutingCommand(DriverWrapper.scala:639)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.getCommandOutputAndError(DriverWrapper.scala:485)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.executeCommand(DriverWrapper.scala:597)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.runInnerLoop(DriverWrapper.scala:390)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.runInner(DriverWrapper.scala:337)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.run(DriverWrapper.scala:219)\n\tat java.lang.Thread.run(Thread.java:748)\n","workflows":[],"startTime":1585518349402,"submitTime":1585518314905,"finishTime":1585518385243,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f2b37667-4772-460f-8271-b357fdead128"},{"version":"CommandV1","origId":1961810187579334,"guid":"92e2fc31-7ed4-4404-b7e5-c708bdc4e114","subtype":"command","commandType":"auto","position":8.2421875,"command":"%md\n\n#### Auto-trim strings\n\nMany of the DB2 character fields come with extra spaces. These should generally all be removed","commandVersion":26,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585518314930,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"9f8923d0-d557-4635-bcfa-8ebed0645606"},{"version":"CommandV1","origId":1961810187579335,"guid":"4c44d0fe-15db-43f4-b226-59e937447148","subtype":"command","commandType":"auto","position":8.36328125,"command":"from pyspark.sql.functions import *\n\nautotrimStringsDF = spark.table(\"staging\")\n\nfor columnName, columnType in autotrimStringsDF.dtypes:\n  if columnType == \"string\":\n    autotrimStringsDF = autotrimStringsDF.withColumn(columnName, coalesce(trim(col(columnName)), lit(\"\")))","commandVersion":140,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"autotrimStringsDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Ordered_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Received_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Canceled_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Merchandising_Unit_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Ordered_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Received_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Canceled_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Purchase_Order_Total_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Create_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Transmitted_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Acknowledge_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Drop_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Estimated_Ship_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Origin_Port_Departure_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"US_Port_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Depot_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Arrive_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Cancel_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Changed_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Location_nk","nullable":false,"type":"string"},{"metadata":{},"name":"SKU_nk","nullable":false,"type":"string"},{"metadata":{},"name":"SKU_History_nk","nullable":false,"type":"string"},{"metadata":{},"name":"SKU_History_Date","nullable":true,"type":"date"},{"metadata":{},"name":"Shipper_nk","nullable":false,"type":"string"},{"metadata":{},"name":"Shipping_Origin_nk","nullable":false,"type":"string"},{"metadata":{},"name":"Employee_Entered_nk","nullable":false,"type":"string"},{"metadata":{},"name":"Transaction_Link_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"PO_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Line_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Market_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Division_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Origin_Type","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Number","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Status","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Line_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"Merchandising_Class_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"IC_Priority_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Accessories_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Special_Order_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Number","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Status_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Ship_Complete_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Electronic_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Processed_Through_EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Freight_Free_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Corporate_Acc_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"JIT_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Forecast_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Direct_Paid_After_Receipt","nullable":false,"type":"string"},{"metadata":{},"name":"Snapshot_Effective_Date","nullable":false,"type":"date"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":"Command skipped","error":null,"workflows":[],"startTime":1585518385253,"submitTime":1585518314964,"finishTime":1585518385849,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c1fa5bf3-b988-4eb4-9516-3bced163ba78"},{"version":"CommandV1","origId":1961810187579336,"guid":"6b1094e6-9dab-4be7-8d7a-e43d7c195208","subtype":"command","commandType":"auto","position":8.484375,"command":"%md\n\n#### Automated dimension surrogate key lookup\n\nKey lookups are often straightforward and a little monotonous. This activity is a good candidate for automation. In the next cell we will have an array that can be tailored. If a field from the staging dataset is in the dimension lookup list, then we will attempt to programatically perform the join to the correct dimension and find the surrogate key.","commandVersion":91,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585518314992,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2d229be3-12b4-4a68-8199-4d05bd623f2c"},{"version":"CommandV1","origId":1961810187579337,"guid":"cfadc3fc-e1e7-411f-af96-cb3a8660c352","subtype":"command","commandType":"auto","position":8.96875,"command":"# list of tuples containing info used by the automated dimension lookup. values are:\n# 1. Staging table's dimension attribute (natural key value)\n# 2. Dimension name (including schema)\n# 3. Dimension table's natural key attribute\n# 4. Dimension primary key attribute\n# 5. Name of the foreign key attribute that will get created in the fact table\n# 6. (Optional, for type 2 dimensions) Name of the dimensions Effective Start Date attribute\n# 7. (Optional, for type 2 dimensions) Name of the dimensions Effective End Date attribute\n# 8. (Optional, for type 2 dimensions) Name of the date attribute in the staging-side data that should get checked against the dimension's start/end effective dates\n\n# Type 2 dimensions are supported if you specify the necessary dates. Fields 6, 7 and 8 are marked optional. However, you cannot include just one or two of these. In other words, each dimension tuple in the array below will either contain five attributes or eight attributes, and nothing in between. Also note that the date field specified in the eight setting will get dropped drop the dataframe when this cell is complete. Do not use a date field that you need to retain. Instead add an extra date field to your query above.\n\n# Note that it is ok for the list below to have dimension info that does not pertain to this fact. If this fact does not use one of the dimensions listed below, the subsequent code basically ignores that dimension\nfrom pyspark.sql import *\nfrom pyspark.sql.functions import *\n\nstagingDF = autotrimStringsDF\n\n# if you suspect that one of the dimension lookups is improperly affecting the dataset rowcount (i.e. because of non-unique join conditions), change this to True\n# This setting will give you before and after rowcounts during each dimension join. However, this comes at a signficant performance cost, so do not leave this enabled indefinitely\ndebugDimensionLookup = False\n\nautomatedDimensionLookupList = [\n  (\"Employee_Entered_nk\", \"DW.Dim_Employee\", \"Employee_ID_nk\", \"Employee_sk\", \"Employee_Entered_fk\"),\n  (\"Location_nk\", \"DW.Dim_Location\", \"Location_Code_nk\", \"Location_sk\", \"Location_fk\"),\n  (\"SKU_nk\", \"DW.Dim_SKU\", \"SKU_Unformatted_nk\", \"SKU_sk\", \"SKU_fk\"),\n  (\"Shipper_nk\", \"DW.Dim_Vendor\", \"Vendor_ID_nk\", \"Vendor_sk\", \"Shipper_fk\"),\n  (\"Shipping_Origin_nk\", \"DW.Dim_ShippingOrigin\", \"Shipping_Origin_Code\", \"Shipping_Origin_sk\", \"Shipping_Origin_fk\"),\n  (\"SKU_History_nk\", \"DW.Dim_SKU_History\", \"SKU_Unformatted_nk\", \"SKU_History_sk\", \"SKU_History_fk\", \"Start_Date\", \"End_Date\", \"SKU_History_Date\"),\n  (\"PO_Create_Date_fk\", \"DW.Dim_Date\", \"Date_sk\", \"Date_sk\", \"PO_Create_Date_fk\"),\n  (\"Transmitted_Date_fk\", \"DW.Dim_Date\", \"Date_sk\", \"Date_sk\", \"Transmitted_Date_fk\"),\n  (\"Acknowledge_Date_fk\", \"DW.Dim_Date\", \"Date_sk\", \"Date_sk\", \"Acknowledge_Date_fk\"),\n  (\"Drop_Date_fk\", \"DW.Dim_Date\", \"Date_sk\", \"Date_sk\", \"Drop_Date_fk\"),\n  (\"Estimated_Ship_Date_fk\", \"DW.Dim_Date\", \"Date_sk\", \"Date_sk\", \"Estimated_Ship_Date_fk\"),\n  (\"Origin_Port_Departure_Date_fk\", \"DW.Dim_Date\", \"Date_sk\", \"Date_sk\", \"Origin_Port_Departure_Date_fk\"),\n  (\"US_Port_Arrival_Date_fk\", \"DW.Dim_Date\", \"Date_sk\", \"Date_sk\", \"US_Port_Arrival_Date_fk\"),\n  (\"Depot_Arrival_Date_fk\", \"DW.Dim_Date\", \"Date_sk\", \"Date_sk\", \"Depot_Arrival_Date_fk\"),\n  (\"Arrive_Date_fk\", \"DW.Dim_Date\", \"Date_sk\", \"Date_sk\", \"Arrive_Date_fk\"),\n  (\"Cancel_Date_fk\", \"DW.Dim_Date\", \"Date_sk\", \"Date_sk\", \"Cancel_Date_fk\"),\n  (\"Changed_Date_fk\", \"DW.Dim_Date\", \"Date_sk\", \"Date_sk\", \"Changed_Date_fk\")\n]\n\n# note about dates:\n# the previous staging query already cast the dates into the \"smartdate\" YYYYMMDD format.\n# However, we will still join to the Dim_Date dimension to ensure that the incoming dates are actually in the date dimension.\n# This way, if the dates are not found in the date dimension, they will automatically be converted to the unknown (zero) key.\n\nfor dimensionTuple in automatedDimensionLookupList:\n  for columnName in set(stagingDF.columns) & set([dimensionTuple[0]]):\n    dimensionName = dimensionTuple[1]\n    dimensionNaturalKey = dimensionTuple[2]\n    dimensionPrimaryKey = dimensionTuple[3]\n    factForeignKeyName = dimensionTuple[4]\n    if len(dimensionTuple) > 5:\n      type2StartDate = dimensionTuple[5]\n      type2EndDate = dimensionTuple[6]\n      stagingDate = dimensionTuple[7]\n    \n    if len(dimensionTuple) > 5:\n      dimensionType = 2 # Kimball-style type 2 dimension (dimension rows are effective dated)\n    else:\n      dimensionType = 1 # Kimball-style type 1 dimension (dimension retains no history and shows current state only)\n    \n    columnList = \"[\" + dimensionPrimaryKey + \"] AS dim_lookup_primary_key, [\" + dimensionNaturalKey + \"] AS dim_lookup_natural_key\"\n      \n    if dimensionType == 1:\n      dimensionSelectQuery = \"(SELECT \" + columnList + \" FROM \" + dimensionName + \") dim\"\n    else:\n      dimensionSelectQuery = \"(SELECT \" + columnList + \", \" + type2StartDate + \", \" + type2EndDate + \" FROM \" + dimensionName + \") dim\"\n      \n    dimDF = spark.read.jdbc(url=jdbcUrl, table=dimensionSelectQuery, properties=connectionProperties)\n\n    # check the pre-join rowcount\n    if debugDimensionLookup == True:\n      preJoinRowCount = stagingDF.count()\n      # Uncomment the line below for extra debugging info\n      #print(\"Pre \" + columnName + \" join rowcount:  \" + str(preJoinRowCount))\n      \n    # joins are performed differently depending on the dimension type (1 vs 2)\n    if dimensionType == 1:\n      stagingDF = stagingDF.alias(\"staging\") \\\n        .join(dimDF.alias(\"dim\"), stagingDF[columnName] == dimDF[\"dim_lookup_natural_key\"], how=\"leftouter\")\n    else:\n      stagingDF = stagingDF.alias(\"staging\") \\\n        .join(dimDF.alias(\"dim\"), \n                (stagingDF[columnName] == dimDF[\"dim_lookup_natural_key\"]) & \n                (stagingDF[stagingDate] >= dimDF[type2StartDate]) & \n                (stagingDF[stagingDate] < dimDF[type2EndDate]), how=\"leftouter\"\n             )\n      \n    # select everything from the staging side plus the new dimension primary key (and natural key for optional debugging a few statements later)\n    # rename the original natural key column from the staging dataset (we will potentially use this column if we run the debugging code)\n    # rename the dimension primary key to whatever we'll call it in the staging dataset\n    # and enforce the unknown key (0) in the event that the lookup failed to return any value\n    stagingDF = stagingDF \\\n        .select(\"staging.*\", dimDF[\"dim_lookup_primary_key\"], dimDF[\"dim_lookup_natural_key\"]) \\\n        .withColumnRenamed(columnName, \"original_staging_side_natural_key_column\") \\\n        .withColumnRenamed(\"dim_lookup_primary_key\", factForeignKeyName) \\\n        .withColumn(factForeignKeyName, coalesce(col(factForeignKeyName), lit(0))) # if the join fails to return a surrogate key, assign a default value (0)\n\n    # check the post-join rowcount (check now before we drop the natural keys so that we have access to potentially detect which natural key is causing an issue)\n    if debugDimensionLookup == True:\n      postJoinRowCount = stagingDF.count()\n      # Uncomment the line below for extra debugging info\n      #print(\"Post \" + columnName + \" join rowcount: \" + str(postJoinRowCount))\n      if postJoinRowCount - preJoinRowCount != 0:\n        print(\"!!! Problem detected in \" + columnName + \" join.\")\n        # Uncomment out the following to see which natural key(s) are causing an issue\n        #distinctDimensionKeys = dimDF.select(\"dim_lookup_natural_key\", \"dim_lookup_primary_key\").distinct().alias(\"dim\")\n        #display(stagingDF.select(\"original_staging_side_natural_key_column\").distinct() \\\n        #         .join(distinctDimensionKeys, stagingDF[\"original_staging_side_natural_key_column\"] == dimDF[\"dim_lookup_natural_key\"]) \\\n        #         .groupBy(dimDF[\"dim_lookup_natural_key\"]).agg(count(\"*\").alias(\"natural_key_count\")).filter(col(\"natural_key_count\") > 1)\n        #      )  \n    \n    # we only hung on the natural keys this long in case we wanted to use it within the debugging code above. now it's safe to drop\n    stagingDF = stagingDF \\\n        .drop(\"dim_lookup_natural_key\") \\\n        .drop(\"original_staging_side_natural_key_column\")\n    \n    if dimensionType == 2:\n      stagingDF = stagingDF.drop(stagingDF[stagingDate])","commandVersion":2051,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"dimDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"dim_lookup_primary_key","nullable":true,"type":"integer"},{"metadata":{},"name":"dim_lookup_natural_key","nullable":true,"type":"integer"}],"type":"struct"},"tableIdentifier":null},{"name":"stagingDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Ordered_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Received_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Canceled_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Merchandising_Unit_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Ordered_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Received_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Canceled_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Purchase_Order_Total_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Transaction_Link_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"PO_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Line_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Market_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Division_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Origin_Type","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Number","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Status","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Line_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"Merchandising_Class_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"IC_Priority_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Accessories_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Special_Order_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Number","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Status_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Ship_Complete_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Electronic_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Processed_Through_EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Freight_Free_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Corporate_Acc_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"JIT_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Forecast_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Direct_Paid_After_Receipt","nullable":false,"type":"string"},{"metadata":{},"name":"Snapshot_Effective_Date","nullable":false,"type":"date"},{"metadata":{},"name":"Employee_Entered_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Location_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Shipper_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Shipping_Origin_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_History_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"PO_Create_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Transmitted_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Acknowledge_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Drop_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Estimated_Ship_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Origin_Port_Departure_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"US_Port_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Depot_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Arrive_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Cancel_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Changed_Date_fk","nullable":false,"type":"integer"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":"Command skipped","error":null,"workflows":[],"startTime":1585518385858,"submitTime":1585518315024,"finishTime":1585518388621,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"html","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"23e9e792-afab-4f72-99aa-e48c550a7dc9"},{"version":"CommandV1","origId":1961810187579338,"guid":"232a29cd-4702-4b5f-8336-1590cb021e2f","subtype":"command","commandType":"auto","position":9.453125,"command":"%md\n\n#### Manual dimension surrogate key lookup\n\n","commandVersion":13,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585518315052,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"557c3df4-a3c3-4c3a-a012-baf392ed2881"},{"version":"CommandV1","origId":1961810187579339,"guid":"b76d4023-0281-4192-9647-9a8574e154da","subtype":"command","commandType":"auto","position":9.9375,"command":"%md\n\n#### Calculate hashes and add other metadata\n\nSome fact ETL designs rely on being able to uniquely identify each fact row. Support for unique row identification comes in this form of hashing. There are two hashes that will be calculated. One hashes the natural keys and provides a value that uniquely identifies the fact row. The other hashes all other columns and lets us identify if something on the row changed.\n\nOther fact ETL designs either don't need or cannot support unique row identification. Sometimes limitations from the source data restrict our ability to uniquely identify each row. In other cases, the fact ETL calls for wiping and reload broad units of data, an entire month, or year, or even all data in the entire fact table.\n\nUse the flag \"includeHashSupport\" to activate the code necessary to add and debug these two hash values.","commandVersion":55,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585518315098,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"03c13546-8fd4-4d4c-b9e9-aa6f017aa3f4"},{"version":"CommandV1","origId":1961810187579340,"guid":"3ed9e2f9-4565-499e-af2b-25ffe4d1f10f","subtype":"command","commandType":"auto","position":10.875,"command":"from pyspark.sql.functions import *\n\nincludeHashSupport = True\n\nif includeHashSupport == True:\n  # IMPORTANT! The array below must contain all the columns that collectively form the natural key of each row\n  # Be careful! These lists are CASE SENSITIVE\n  naturalKeyColumnList = [\"PO_Number_nk\", \"PO_Line_Number_nk\", \"Market_nk\", \"Division_nk\"]\n\n  #naturalKeyColumnList = [\"SKU_fk\", \"Location_fk\", \"Shipper_fk\", \"Shipping_Origin_fk\", \"Employee_Entered_fk\", \"Transaction_Link_fk\"]\n  # We will also hash all the non-key columns. This hash is the \"Row Value Hash\". A change to any of these columns in an existing row will trigger a new row version (with the old row no longer effective). In the event that there are columns that we DON'T want to trigger a new row, add them to this exception list:\n  exceptionValueColumnList = []\n\n  # Set the following flag to true to test for non-uniqueness in the natural key\n  # If the natural key (which is assigned above) does not provide a unique key to every single row, unexpected behavior can possibly occur during updates to the fact table\n  debugHashCalculation = False\n\n  # take these two arrays and produce a list of the value columns (i.e. the non-key columns)\n  valueColumnList = set(stagingDF.columns) - set(naturalKeyColumnList) - set(exceptionValueColumnList)\n\n  withMetadataDF = stagingDF \\\n    .withColumn(\"Key_Hash\", sha2(concat_ws(\"||\", *[col(columnName) for columnName in set(stagingDF.columns) & set(naturalKeyColumnList)]), 256)) \\\n    .withColumn(\"Row_Value_Hash\", sha2(concat_ws(\"||\", *[col(columnName) for columnName in set(stagingDF.columns) & set(valueColumnList)]), 256))\n\n  if debugHashCalculation == True:\n    # group by the supposedly unique Key_Hash column and look for times when the same Key_Hash is used by more than one row\n    keyHashNonuniqueDF = withMetadataDF.groupBy(\"Key_Hash\").agg(count(\"*\").alias(\"Key_Hash_Count\")).filter(col(\"Key_Hash_Count\") > 1)\n    keyHashNonuniqueCount = keyHashNonuniqueDF.count()\n    if keyHashNonuniqueCount > 0:\n      print(str(keyHashNonuniqueCount) + \" row(s) have a non-unique Key_Hash value due to non-unique natural keys being supplied to the hash function.\")\n      # join the list of non-unique hashes back with the original dataset, to show all the rows that will be affected by the problems caused by non-unique keys\n      # uncomment out the line below to see this list of offending keys\n      #display(withMetadataDF.alias(\"withMetadata\").join(keyHashNonuniqueDF.alias(\"nonunique\"), withMetadataDF.Key_Hash == keyHashNonuniqueDF.Key_Hash, how=\"inner\").select(\"withMetadata.*\"))\nelse:\n  withMetadataDF = stagingDF\n  \n# regardless of whether we are calculating hashes or not, add the other metadata columns\nwithMetadataDF = withMetadataDF \\\n  .withColumn(\"ETLBatchID_Insert\", lit(masterProcessNumber)) \\\n  .withColumn(\"ETLBatchID_Update\", lit(masterProcessNumber)) \n","commandVersion":767,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"withMetadataDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Ordered_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Received_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Canceled_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Merchandising_Unit_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Ordered_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Received_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Canceled_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Purchase_Order_Total_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Transaction_Link_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"PO_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Line_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Market_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Division_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Origin_Type","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Number","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Status","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Line_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"Merchandising_Class_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"IC_Priority_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Accessories_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Special_Order_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Number","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Status_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Ship_Complete_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Electronic_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Processed_Through_EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Freight_Free_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Corporate_Acc_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"JIT_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Forecast_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Direct_Paid_After_Receipt","nullable":false,"type":"string"},{"metadata":{},"name":"Snapshot_Effective_Date","nullable":false,"type":"date"},{"metadata":{},"name":"Employee_Entered_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Location_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Shipper_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Shipping_Origin_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_History_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"PO_Create_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Transmitted_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Acknowledge_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Drop_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Estimated_Ship_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Origin_Port_Departure_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"US_Port_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Depot_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Arrive_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Cancel_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Changed_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Key_Hash","nullable":true,"type":"string"},{"metadata":{},"name":"Row_Value_Hash","nullable":true,"type":"string"},{"metadata":{},"name":"ETLBatchID_Insert","nullable":false,"type":"string"},{"metadata":{},"name":"ETLBatchID_Update","nullable":false,"type":"string"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":"<span class=\"ansi-red-fg\">NameError</span>: name &#39;stagingDF&#39; is not defined","error":"<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-1961810187579340&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     17</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">     18</span>   <span class=\"ansi-red-fg\"># take these two arrays and produce a list of the value columns (i.e. the non-key columns)</span>\n<span class=\"ansi-green-fg\">---&gt; 19</span><span class=\"ansi-red-fg\">   </span>valueColumnList <span class=\"ansi-blue-fg\">=</span> set<span class=\"ansi-blue-fg\">(</span>stagingDF<span class=\"ansi-blue-fg\">.</span>columns<span class=\"ansi-blue-fg\">)</span> <span class=\"ansi-blue-fg\">-</span> set<span class=\"ansi-blue-fg\">(</span>naturalKeyColumnList<span class=\"ansi-blue-fg\">)</span> <span class=\"ansi-blue-fg\">-</span> set<span class=\"ansi-blue-fg\">(</span>exceptionValueColumnList<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     20</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">     21</span>   withMetadataDF <span class=\"ansi-blue-fg\">=</span> stagingDF<span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">\\</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name &#39;stagingDF&#39; is not defined</div>","workflows":[],"startTime":1585518388630,"submitTime":1585518315133,"finishTime":1585518388887,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"html","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2ead0fd3-d51a-47b0-be5b-9c218e576b0f"},{"version":"CommandV1","origId":1961810187579341,"guid":"2153ae54-c111-4c17-8ce3-0a3fa819e3ad","subtype":"command","commandType":"auto","position":11.34375,"command":"%md\n\n#### Prevent duplicates caused by malformed dimension lookups\n\nWhen the dimension lookups operate correctly, they should not change the number of rows within the incoming data. However, a join against a non-unique field within the dimension could potentially cause a single staging row to be joined to more than one dimension row, skewing the amounts that are ultimately loaded into the fact table. As a final safety check to prevent this from happening and causing issues in the fact table, we will group by the natural key of the fact and randomly throw out duplicates.\n\nIf this situation is occurring, the root cause must be identified and addressed.","commandVersion":121,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585518315160,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"571f9675-da2b-48b2-848a-9b3a8e2b89e2"},{"version":"CommandV1","origId":1961810187579342,"guid":"08b9032b-f103-40c6-afab-b15034b2f244","subtype":"command","commandType":"auto","position":11.578125,"command":"from pyspark.sql.window import *\n\nif includeHashSupport == True:\n    # set the following to True to check to see whether any rows are being dropped\n    debugDuplicateDetection = False\n    \n    if debugDuplicateDetection == True:\n      beforeDuplicateDetectionCount = withMetadataDF.count()\n    \n    identifyFactDuplicates = Window.partitionBy(\"Key_Hash\").orderBy(col(\"Row_Value_Hash\").desc())\n    addRowNumberDF = withMetadataDF.select(\"*\", row_number().over(identifyFactDuplicates).alias(\"duplicate_detection_row_number\"))\n    \n    afterDuplicatesDroppedDF = addRowNumberDF.filter(\"duplicate_detection_row_number = 1\").drop(\"duplicate_detection_row_number\")\n    droppedRowsDF = addRowNumberDF.filter(\"duplicate_detection_row_number > 1\")\n    \n    if debugDuplicateDetection == True:\n      afterDuplicateDetectionCount = afterDuplicatesDroppedDF.count()\n      countOfRowsDropped = beforeDuplicateDetectionCount - afterDuplicateDetectionCount\n      if countOfRowsDropped > 0:\n        print(\"!!! Dropping \" + str(countOfRowsDropped) + \" row(s) due to duplicate Key_Hash values.\")\n        # uncomment out the following line to see the rows that are being dropped \n        #display(droppedRowsDF)\n      else:\n        print(\"No rows are being dropped. The Key_Hash appears to be unique for all rows.\")","commandVersion":247,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"addRowNumberDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Ordered_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Received_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Canceled_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Merchandising_Unit_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Ordered_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Received_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Canceled_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Purchase_Order_Total_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Transaction_Link_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"PO_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Line_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Market_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Division_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Origin_Type","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Number","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Status","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Line_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"Merchandising_Class_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"IC_Priority_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Accessories_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Special_Order_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Number","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Status_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Ship_Complete_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Electronic_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Processed_Through_EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Freight_Free_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Corporate_Acc_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"JIT_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Forecast_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Direct_Paid_After_Receipt","nullable":false,"type":"string"},{"metadata":{},"name":"Snapshot_Effective_Date","nullable":false,"type":"date"},{"metadata":{},"name":"Employee_Entered_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Location_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Shipper_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Shipping_Origin_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_History_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"PO_Create_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Transmitted_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Acknowledge_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Drop_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Estimated_Ship_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Origin_Port_Departure_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"US_Port_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Depot_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Arrive_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Cancel_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Changed_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Key_Hash","nullable":true,"type":"string"},{"metadata":{},"name":"Row_Value_Hash","nullable":true,"type":"string"},{"metadata":{},"name":"ETLBatchID_Insert","nullable":false,"type":"string"},{"metadata":{},"name":"ETLBatchID_Update","nullable":false,"type":"string"},{"metadata":{},"name":"duplicate_detection_row_number","nullable":true,"type":"integer"}],"type":"struct"},"tableIdentifier":null},{"name":"afterDuplicatesDroppedDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Ordered_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Received_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Canceled_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Merchandising_Unit_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Ordered_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Received_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Canceled_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Purchase_Order_Total_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Transaction_Link_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"PO_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Line_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Market_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Division_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Origin_Type","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Number","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Status","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Line_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"Merchandising_Class_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"IC_Priority_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Accessories_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Special_Order_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Number","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Status_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Ship_Complete_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Electronic_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Processed_Through_EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Freight_Free_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Corporate_Acc_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"JIT_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Forecast_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Direct_Paid_After_Receipt","nullable":false,"type":"string"},{"metadata":{},"name":"Snapshot_Effective_Date","nullable":false,"type":"date"},{"metadata":{},"name":"Employee_Entered_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Location_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Shipper_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Shipping_Origin_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_History_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"PO_Create_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Transmitted_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Acknowledge_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Drop_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Estimated_Ship_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Origin_Port_Departure_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"US_Port_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Depot_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Arrive_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Cancel_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Changed_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Key_Hash","nullable":true,"type":"string"},{"metadata":{},"name":"Row_Value_Hash","nullable":true,"type":"string"},{"metadata":{},"name":"ETLBatchID_Insert","nullable":false,"type":"string"},{"metadata":{},"name":"ETLBatchID_Update","nullable":false,"type":"string"}],"type":"struct"},"tableIdentifier":null},{"name":"droppedRowsDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Ordered_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Received_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Canceled_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Merchandising_Unit_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Ordered_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Received_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Canceled_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Purchase_Order_Total_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Transaction_Link_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"PO_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Line_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Market_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Division_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Origin_Type","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Number","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Status","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Line_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"Merchandising_Class_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"IC_Priority_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Accessories_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Special_Order_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Number","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Status_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Ship_Complete_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Electronic_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Processed_Through_EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Freight_Free_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Corporate_Acc_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"JIT_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Forecast_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Direct_Paid_After_Receipt","nullable":false,"type":"string"},{"metadata":{},"name":"Snapshot_Effective_Date","nullable":false,"type":"date"},{"metadata":{},"name":"Employee_Entered_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Location_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Shipper_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Shipping_Origin_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_History_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"PO_Create_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Transmitted_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Acknowledge_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Drop_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Estimated_Ship_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Origin_Port_Departure_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"US_Port_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Depot_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Arrive_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Cancel_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Changed_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Key_Hash","nullable":true,"type":"string"},{"metadata":{},"name":"Row_Value_Hash","nullable":true,"type":"string"},{"metadata":{},"name":"ETLBatchID_Insert","nullable":false,"type":"string"},{"metadata":{},"name":"ETLBatchID_Update","nullable":false,"type":"string"},{"metadata":{},"name":"duplicate_detection_row_number","nullable":true,"type":"integer"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":"<span class=\"ansi-red-fg\">NameError</span>: name &#39;includeHashSupport&#39; is not defined","error":"<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-1961810187579342&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      1</span> <span class=\"ansi-green-fg\">from</span> pyspark<span class=\"ansi-blue-fg\">.</span>sql<span class=\"ansi-blue-fg\">.</span>window <span class=\"ansi-green-fg\">import</span> <span class=\"ansi-blue-fg\">*</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      2</span> \n<span class=\"ansi-green-fg\">----&gt; 3</span><span class=\"ansi-red-fg\"> </span><span class=\"ansi-green-fg\">if</span> includeHashSupport <span class=\"ansi-blue-fg\">==</span> <span class=\"ansi-green-fg\">True</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      4</span>     <span class=\"ansi-red-fg\"># set the following to True to check to see whether any rows are being dropped</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      5</span>     debugHashCalculation <span class=\"ansi-blue-fg\">=</span> <span class=\"ansi-green-fg\">False</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name &#39;includeHashSupport&#39; is not defined</div>","workflows":[],"startTime":1585518388897,"submitTime":1585518315197,"finishTime":1585518389005,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4e1fa976-48c0-48fe-9ef8-ff76405d3207"},{"version":"CommandV1","origId":1961810187579343,"guid":"a8407301-dd2e-40ad-b25b-02695ac75e4c","subtype":"command","commandType":"auto","position":11.6953125,"command":"# add/remove some final columns\n\nif includeHashSupport == True:\n   finalDF = afterDuplicatesDroppedDF \\\n     .withColumnRenamed(\"Snapshot_Effective_Date\", \"Snapshot_StartDate\") \\\n     .withColumn(\"Snapshot_EndDate\", to_date(lit(\"9999-12-31\"))) \\\n     .withColumn(\"Snapshot_Current_Flag\", lit(1))\nelse:\n  finalDF = withMetadataDF\n  \nfinalDF = finalDF \\\n  .withColumn(\"SourceSystem_fk\", lit(0)) \\\n  .drop(\"snapshot_date\") \\\n  .drop(\"period\")","commandVersion":33,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"finalDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Ordered_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Received_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Canceled_Quantity","nullable":true,"type":"integer"},{"metadata":{},"name":"Merchandising_Unit_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Ordered_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Received_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Canceled_Cost","nullable":true,"type":"decimal(38,6)"},{"metadata":{},"name":"Purchase_Order_Total_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Transaction_Link_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"PO_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Line_Number_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Market_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Division_nk","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Origin_Type","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Master_PO_Number","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"PO_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Status","nullable":false,"type":"string"},{"metadata":{},"name":"PO_Line_Status_Code","nullable":false,"type":"string"},{"metadata":{},"name":"Merchandising_Class_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"IC_Priority_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Accessories_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Special_Order_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Number","nullable":false,"type":"string"},{"metadata":{},"name":"Acknowledge_Status_Code","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Ship_Complete_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Electronic_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Processed_Through_EDI_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Freight_Free_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Corporate_Acc_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"JIT_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Forecast_PO_Flag","nullable":false,"type":"string"},{"metadata":{},"name":"Direct_Paid_After_Receipt","nullable":false,"type":"string"},{"metadata":{},"name":"Snapshot_StartDate","nullable":false,"type":"date"},{"metadata":{},"name":"Employee_Entered_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Location_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Shipper_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Shipping_Origin_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_History_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"PO_Create_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Transmitted_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Acknowledge_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Drop_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Estimated_Ship_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Origin_Port_Departure_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"US_Port_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Depot_Arrival_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Arrive_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Cancel_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Changed_Date_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"Key_Hash","nullable":true,"type":"string"},{"metadata":{},"name":"Row_Value_Hash","nullable":true,"type":"string"},{"metadata":{},"name":"ETLBatchID_Insert","nullable":false,"type":"string"},{"metadata":{},"name":"ETLBatchID_Update","nullable":false,"type":"string"},{"metadata":{},"name":"Snapshot_EndDate","nullable":true,"type":"date"},{"metadata":{},"name":"Snapshot_Current_Flag","nullable":false,"type":"integer"},{"metadata":{},"name":"SourceSystem_fk","nullable":false,"type":"integer"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585518389021,"submitTime":1585518315226,"finishTime":1585518389124,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4c6e0b19-88c2-4e8b-ac23-7f8d22b8f346"},{"version":"CommandV1","origId":1961810187579344,"guid":"98d42d05-0960-4465-8c97-b19cc29aa468","subtype":"command","commandType":"auto","position":11.8125,"command":"%md\n\n#### Prep the fact table prior to load\n\nDepending on the fact loading strategy, this step could take different forms:\n\n- Delete entire periods and reload from the incoming staging data (periodic snapshot)\n- Delete specific fact rows and reload from the incoming staging data\n- Expire fact rows and load new incoming staging data (temporal snapshot)\n\nNote that any deletes or update against the fact table will take place in Azure SQL, outside Databricks. For performance reasons, we will be using the Azure Spark Connector to connect to Azure SQL and execute the deletes. This connector is currently only available to use via Spark's Scala API. Hence the next steps will be performed in Scala.","commandVersion":102,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585518315262,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"85e5fb39-4373-4951-8f8d-cdfc518fa731"},{"version":"CommandV1","origId":1961810187579348,"guid":"0019aa47-121b-4c4c-af80-4ff2399f61e4","subtype":"command","commandType":"auto","position":14.75,"command":"%md\n\n#### Expire fact rows and load new rows\n\nGet a list of all active rows in the fact table (rows will be represented by their key hashes). Compare this to the key hashes of the incoming staging data. Any hash in both sets will need to be expired in the fact table.\n\nThere are a couple ways to handle the expiring of rows. Initially the list of hashes that need to expired exists only inside this notebook. We could iterate over each hash, issuing a SQL update statement against the fact table. This is a clean approach and would also work if the fact table was ever stored in something besides a relational database. However, it will likely be slow, especially if there are many rows to expire. The faster method takes advantage of one of the strengths of relational databases. We insert all hashes that need to be updated into some sort of table in the Azure SQL database, and then we join this table to the fact table and update all respective hashes in a single update statement. Faster, but a little more complicated.","commandVersion":210,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585518315307,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"76122be8-3344-49c3-b5fc-f5ad942430d7"},{"version":"CommandV1","origId":1961810187579350,"guid":"c12624cc-8d9c-465c-9b89-1cc6deea6895","subtype":"command","commandType":"auto","position":15.375,"command":"# Get hashes of all active rows\nactiveRowsQuery = \"(SELECT Key_Hash, Row_Value_Hash FROM Purchasing.Fact_PurchaseOrderTemporalSnapshots WHERE Snapshot_Current_Flag = 1) activerows\"\nactiveRowsDF = spark.read.jdbc(url=jdbcUrl, table=activeRowsQuery, properties=connectionProperties)\n\n# the staging dataset needs to include a date that will be used to mark this row as effective (and to use as the Effective End Date of any previous row)\n# This attribute needs to be called Snapshot_Effective_Date. This could be a column that was included in the original \"staging\" temporary view, or it could just be a rename of a column (example commented out below)\n#withMetadataDF = withMetadataDF.withColumn(\"Snapshot_Effective_Date\", col(\"Example_Column\"))\n\n# join the active rows against the staging data (on the key hash) and compare the value hash. Anytime a value hash doesn't match, we will effective end date the fact row\nrowsToExpireDF = finalDF.alias(\"staging\") \\\n  .join(activeRowsDF.alias(\"fact\"), (finalDF.Key_Hash == activeRowsDF.Key_Hash) & (finalDF.Row_Value_Hash != activeRowsDF.Row_Value_Hash), how=\"inner\") \\\n  .select(\"fact.*\", \"staging.Snapshot_StartDate\")\n\n# at this point we could iterate over each row and perform an update statement for each. this could be quite slow, but would be the only option if the fact is stored outside a relational database\n# since our fact table is stored in a relational database, we will create a session-scope temporary table, bulk insert all the hashes that need to be evaluated, and update them in a single SQL set operation\n\nfactTableName = \"Fact_PurchaseOrderTemporalSnapshot\"\ntemporaryTableName = \"Updates.[temp_insert_\" + factTableName + \"]\"\n\nrowsToExpireDF.write.jdbc(url=jdbcUrl, table=temporaryTableName, mode=\"overwrite\", properties=connectionProperties) \n","commandVersion":438,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"activeRowsDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Key_Hash","nullable":true,"type":"string"},{"metadata":{},"name":"Row_Value_Hash","nullable":true,"type":"string"}],"type":"struct"},"tableIdentifier":null},{"name":"rowsToExpireDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Key_Hash","nullable":true,"type":"string"},{"metadata":{},"name":"Row_Value_Hash","nullable":true,"type":"string"},{"metadata":{},"name":"Snapshot_StartDate","nullable":false,"type":"date"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":"Cancelled","error":null,"workflows":[],"startTime":1585518389136,"submitTime":1585518315343,"finishTime":1585518572917,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4b71e930-41b3-4607-b658-16d05e6c34c7"},{"version":"CommandV1","origId":1961810187579351,"guid":"52c3fd15-4311-4d23-a925-6fcd8587b600","subtype":"command","commandType":"auto","position":19.359375,"command":"%scala\n\nimport com.microsoft.azure.sqldb.spark.config.Config\nimport com.microsoft.azure.sqldb.spark.query._\n\n// and perform the bulk update\n\nval factTableName = \"Fact_PurchaseOrderTemporalSnapshot\"\nval temporaryTableName = \"Updates.[temp_insert_\" + factTableName + \"]\"\n\nval updateStatement = \"UPDATE fact SET fact.Snapshot_EndDate = temp.Snapshot_StartDate, fact.Snapshot_Current_Flag = 0 FROM Purchasing.Fact_PurchaseOrderTemporalSnapshots fact INNER JOIN \" + temporaryTableName + \" temp ON fact.Key_Hash = temp.Key_Hash AND fact.Snapshot_Current_Flag = 1\"\n\nval updateStatementConfig = Config(Map(\n  \"url\"          -> dbutils.secrets.get(scope = \"key-vault-secrets\", key = \"HavertysDWServerName\"),\n  \"databaseName\" -> dbutils.secrets.get(scope = \"key-vault-secrets\", key = \"HavertysDWDBName\"),\n  \"user\"         -> \"ETL\",\n  \"password\"     -> dbutils.secrets.get(scope = \"key-vault-secrets\", key = \"HavertysDWETLAccountPassword\"),\n  \"queryCustom\"  -> updateStatement\n))\n\nsqlContext.sqlDBQuery(updateStatementConfig)\n","commandVersion":66,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">import com.microsoft.azure.sqldb.spark.config.Config\nimport com.microsoft.azure.sqldb.spark.query._\nfactTableName: String = Fact_PurchaseOrderTemporalSnapshot\ntemporaryTableName: String = Updates.[temp_insert_Fact_PurchaseOrderTemporalSnapshot]\nupdateStatement: String = UPDATE fact SET fact.Snapshot_EndDate = temp.Snapshot_StartDate, fact.Snapshot_Current_Flag = 0 FROM Purchasing.Fact_PurchaseOrderTemporalSnapshots fact INNER JOIN Updates.[temp_insert_Fact_PurchaseOrderTemporalSnapshot] temp ON fact.Key_Hash = temp.Key_Hash AND fact.Snapshot_Current_Flag = 1\nupdateStatementConfig: com.microsoft.azure.sqldb.spark.config.Config = com.microsoft.azure.sqldb.spark.config.ConfigBuilder$$anon$1@630f6031\nres0: Either[org.apache.spark.sql.DataFrame,Boolean] = Right(true)\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"Command skipped","error":null,"workflows":[],"startTime":1585518572931,"submitTime":1585518315374,"finishTime":1585518575179,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ab2dc46d-03a4-4147-beca-843379f85676"},{"version":"CommandV1","origId":1961810187579352,"guid":"0593d23b-89ec-4c2c-8b60-34a317647a5b","subtype":"command","commandType":"auto","position":26.0,"command":"%md\n\n#### Insert rows into the fact table","commandVersion":23,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585518315400,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"54e8a22f-85a2-444d-ab89-277f7fddf356"},{"version":"CommandV1","origId":1961810187579353,"guid":"33bc1b18-d1fe-46b0-98cb-5c8450e08cf3","subtype":"command","commandType":"auto","position":27.0,"command":"finalWithRedundantRowsDroppedDF.write.jdbc(url=jdbcUrl, table=\"Purchasing.Fact_PurchaseOrderTemporalSnapshots\", mode=\"append\", properties=connectionProperties) ","commandVersion":21,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"Command skipped","error":null,"workflows":[],"startTime":1585518575301,"submitTime":1585518315461,"finishTime":1585518727517,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e30ec20a-6a10-41a5-b5ae-e0303356afe6"},{"version":"CommandV1","origId":2231586138369500,"guid":"a3af601c-762b-44c6-839e-a23030bb4a0c","subtype":"command","commandType":"auto","position":0.75,"command":"%md\n\nThis notebook follows a common code pattern for fact table-loading. The intention of this notebook was to be a template that could serve the majority of the fact table ETL for Havertys.\n\nThe overall structure of the notebook:\n>1. Read in relevant staging data and create temporary views within Databricks\n>2. Using SQL, pull together the staging data and apply the necessary transformations to prepare the data for the fact table (combining colunns, applying business logic, data cleansing)\n>3. Replace natural keys with the staging dataset with respective dimension surrogate keys (this step is mostly automated)\n>4. If the ETL for this fact table needs to be able to isolate and update individual fact rows, then create hashes to represent the data within the row and check that the \"Key_Hash\" truly provides a unique identifier within the staging dataset (mostly automated)\n>5. Perform any last-moment actions against the fact table (this could mean truncating the entire table prior to a full reload, or deleting a single period prior to reloading that period, or expiring specific rows in a snapshot fact).\n>6. Insert (or update, for certain types of fact tables) the incoming staging data\n\nThe notebook attempts to automate several routine ETL activities. The dimension surrogate key lookup is the primray example, along with the hash calculation. In order to automate these steps, the notebook needs to be fed a little metadata/info about the fact table.\n\n##### Key Customizations\n\nAny portion of the notebook can be adjusted as necessary. This is supposed to be a template, not a strict rulebook. However, there are a few key areas that will almost certainly need to be adjusted when the notebook is adapted to a new fact table:\n\n>- The initial \"staging\" query, which runs against either curated tables or Parquet files that are read in as temporary views\n>- The set of tuples assigned to the **automatedDimensionLookupList** variable. This controls the dimension key lookups.\n>- If the fact ETL makes use of the hashing functionality, the **naturalKeyColumnList** variable is a comma-separate list of the attributes that comprise the unique natural key of each staging row\n>- Fact able prepartions (prior to loading the incoming staging rows)\n>- The final insert into the fact table (must specify the fact table name here)\n\n\n##### Debugging\n\nSeveral cells contain a \"debugging\" variable. This is a variable that, when set to true, will activate some additional code in the cell that attempts to check for common issues. For instance, the dimension key lookup cell contains a variable called \"debugDimensionLookup\". This is normally set to False. Setting it to True will cause the cell to take a rowcount both before and after it performs the join against each dimension. If it detects a change in rowcount, then it will list which dimension join caused an issue. Often, there is additional code (the creation and display of another dataframe) that can be uncommented out to provide even more debugging information.\n\nThe main debugging variables are:\n\n- debugDimensionLookup\n- debugHashCalculation\n- debugDuplicateDetection\n","commandVersion":751,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b6b1d12d-5daf-490d-bbe5-39f7a1c07b28"},{"version":"CommandV1","origId":3035771917484845,"guid":"9a33b291-34b9-4f0f-bd28-5ca40fb2635c","subtype":"script","commandType":"auto","position":5.071428571428571,"command":"","commandVersion":45,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">varBulkInsertTableName_Update: String = BulkInsertSchemaName.BulkInsertTableName\nvarBulkInsertTableName_Insert: String = BulkInsertSchemaName.BulkInsertTableName\n</div>","arguments":{"BulkInsertTableName_Insert":"BulkInsertSchemaName.BulkInsertTableName","BulkInsertTableName_Update":"BulkInsertSchemaName.BulkInsertTableName"},"addedWidgets":{"BulkInsertTableName_Insert":{"widgetType":"text","name":"BulkInsertTableName_Insert","defaultValue":"BulkInsertSchemaName.BulkInsertTableName","label":null,"options":{"widgetType":"text","validationRegex":null}},"BulkInsertTableName_Update":{"widgetType":"text","name":"BulkInsertTableName_Update","defaultValue":"BulkInsertSchemaName.BulkInsertTableName","label":null,"options":{"widgetType":"text","validationRegex":null}}},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585518333234,"submitTime":1585244856752,"finishTime":1585518335482,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8cd67246-403d-4137-a73f-ac4d41e8bba3"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0e2dd0f2-efab-466c-bda6-fe6f8f49e57b"},{"version":"CommandV1","origId":3035771917484846,"guid":"e3b44f5b-6d60-4175-9363-ebec2f9f52f8","subtype":"script","commandType":"auto","position":5.142857142857143,"command":"","commandVersion":159,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585244856780,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8cd67246-403d-4137-a73f-ac4d41e8bba3"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"6ae8907f-b327-4c32-8ac3-ab4fab751ed8"},{"version":"CommandV1","origId":3035771917484847,"guid":"ee75a503-d533-4137-8784-a49d41335b60","subtype":"script","commandType":"auto","position":5.214285714285714,"command":"","commandVersion":44,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585244856815,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8cd67246-403d-4137-a73f-ac4d41e8bba3"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"77b5c1d2-9294-4e38-a584-458a409a4e61"},{"version":"CommandV1","origId":3035771917484848,"guid":"0538e511-e3e7-4cab-8bb8-50a67af828cf","subtype":"script","commandType":"auto","position":5.285714285714286,"command":"","commandVersion":138,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">datalake already mounted\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"java.rmi.RemoteException: java.lang.IllegalArgumentException: requirement failed: Directory already mounted: /mnt/datalake; nested exception is: ","error":null,"workflows":[],"startTime":1585518335493,"submitTime":1585244962342,"finishTime":1585518337115,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8cd67246-403d-4137-a73f-ac4d41e8bba3"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"78e1a9df-8ad5-4789-aac9-1643f481ca06"},{"version":"CommandV1","origId":3035771917484849,"guid":"adfc45f3-1082-45cf-ba81-872949495a10","subtype":"script","commandType":"auto","position":5.357142857142857,"command":"","commandVersion":8,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585518337124,"submitTime":1585244856900,"finishTime":1585518337142,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8cd67246-403d-4137-a73f-ac4d41e8bba3"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a41e51f8-4ae5-47ad-8553-e97ba62ba39a"},{"version":"CommandV1","origId":3035771917484850,"guid":"5d1afc00-3e73-4ca9-972b-3fb5044c70d2","subtype":"script","commandType":"auto","position":5.428571428571429,"command":"","commandVersion":4,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585518337150,"submitTime":1585244856926,"finishTime":1585518337165,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8cd67246-403d-4137-a73f-ac4d41e8bba3"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"96082a16-a680-4a70-86bd-ba35c5c9e061"},{"version":"CommandV1","origId":3035771917484851,"guid":"cc1b60bc-b5ff-497b-8477-b6892b737466","subtype":"script","commandType":"auto","position":5.5,"command":"","commandVersion":12,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585244856959,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8cd67246-403d-4137-a73f-ac4d41e8bba3"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5a18da5a-adc8-419e-abf6-b3180f648975"},{"version":"CommandV1","origId":3035771917484852,"guid":"76c64b8b-7bf7-4a56-b8e8-7fd875b4e818","subtype":"script","commandType":"auto","position":5.571428571428571,"command":"","commandVersion":62,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585518337173,"submitTime":1585244856994,"finishTime":1585518338592,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8cd67246-403d-4137-a73f-ac4d41e8bba3"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"824f6042-4c72-4085-8f08-b34bfe1843e4"},{"version":"CommandV1","origId":3035771917484853,"guid":"c82032ab-ddb5-4722-a8d8-f410480e4292","subtype":"script","commandType":"auto","position":5.642857142857143,"command":"","commandVersion":21,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585244857021,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8cd67246-403d-4137-a73f-ac4d41e8bba3"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f84df5ef-bd20-4a3a-99c0-88abd8e0b1e9"},{"version":"CommandV1","origId":3035771917484854,"guid":"77946ebe-c666-4d6d-b230-1e162c369777","subtype":"script","commandType":"auto","position":5.714285714285714,"command":"","commandVersion":14,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Out[6]: &lt;function __main__.udfMD5Python(colList)&gt;</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585518338602,"submitTime":1585244857057,"finishTime":1585518338645,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8cd67246-403d-4137-a73f-ac4d41e8bba3"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2a311fb9-e8c5-4025-a331-e2bd4ff8a3ad"},{"version":"CommandV1","origId":3035771917484855,"guid":"5a055254-6e31-41fe-92a5-e700c67146ef","subtype":"script","commandType":"auto","position":5.785714285714286,"command":"","commandVersion":7,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Out[7]: &lt;function __main__.udfSHA1Python(colList)&gt;</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585518338654,"submitTime":1585244857084,"finishTime":1585518338687,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8cd67246-403d-4137-a73f-ac4d41e8bba3"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"9b618cb3-b6d6-4317-948f-8fa3c9f0545f"},{"version":"CommandV1","origId":3035771917484856,"guid":"dcd1e82c-c7d5-4cd9-b331-33a351f679f7","subtype":"script","commandType":"auto","position":5.857142857142857,"command":"","commandVersion":21,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">import com.microsoft.azure.sqldb.spark.bulkcopy.BulkCopyMetadata\nimport com.microsoft.azure.sqldb.spark.config.Config\nimport com.microsoft.azure.sqldb.spark.connect._\nbulkCopyConfig_Update: com.microsoft.azure.sqldb.spark.config.Config = com.microsoft.azure.sqldb.spark.config.ConfigBuilder$$anon$1@f83eb8c8\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<div class=\"ansiout\">command-787803810529797:8: error: not found: value varBulkInsertTableName_Update\n  &quot;dbTable&quot;      -&gt; varBulkInsertTableName_Update,\n                    ^\n</div>","error":null,"workflows":[],"startTime":1585518338700,"submitTime":1585244857116,"finishTime":1585518340475,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8cd67246-403d-4137-a73f-ac4d41e8bba3"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"847b9acb-ad62-4c4b-aae3-dd046fba64a8"},{"version":"CommandV1","origId":3035771917484857,"guid":"5a00dc55-6f4d-44ee-8fa8-f167cf9d82d7","subtype":"script","commandType":"auto","position":5.928571428571429,"command":"","commandVersion":9,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">import com.microsoft.azure.sqldb.spark.bulkcopy.BulkCopyMetadata\nimport com.microsoft.azure.sqldb.spark.config.Config\nimport com.microsoft.azure.sqldb.spark.connect._\nbulkCopyConfig_Insert: com.microsoft.azure.sqldb.spark.config.Config = com.microsoft.azure.sqldb.spark.config.ConfigBuilder$$anon$1@f83eb8c8\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<div class=\"ansiout\">command-787803810529798:8: error: not found: value varBulkInsertTableName_Insert\n  &quot;dbTable&quot;      -&gt; varBulkInsertTableName_Insert,\n                    ^\n</div>","error":null,"workflows":[],"startTime":1585518340492,"submitTime":1585244857152,"finishTime":1585518342021,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8cd67246-403d-4137-a73f-ac4d41e8bba3"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5006de7b-8f3f-4a1a-9668-51146b582978"}],"dashboards":[],"guid":"3b64ab93-cf75-4a5e-98ae-efd5a1f961a9","globalVars":{},"iPythonMetadata":null,"inputWidgets":{"MasterProcessNumber":{"nuid":"b98c57b4-4556-44af-8020-7c06d7fda097","currentValue":"0","widgetInfo":{"widgetType":"text","name":"MasterProcessNumber","defaultValue":"0","label":null,"options":{"widgetType":"text","validationRegex":null}}}}}