{"version":"NotebookV1","origId":1961810187579109,"name":"Load Fact_InventorySnapshot","language":"python","commands":[{"version":"CommandV1","origId":1961810187579110,"guid":"b9c3ef0c-7543-4c61-80b7-e1b29c5a2283","subtype":"command","commandType":"auto","position":1.5,"command":"#masterProcessNumber = getArgument(\"MasterProcessNumber\", \"-1\")\n\n#Creates and sets the widgets and variables used later on in the notebook.\ndbutils.widgets.text(\"MasterProcessNumber\", \"0\")\nmasterProcessNumber = dbutils.widgets.get(\"MasterProcessNumber\")","commandVersion":7,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{"MasterProcessNumber":"0"},"addedWidgets":{"MasterProcessNumber":{"widgetType":"text","name":"MasterProcessNumber","defaultValue":"0","label":null,"options":{"widgetType":"text","validationRegex":null}}},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585506854128,"submitTime":1585506811589,"finishTime":1585506854191,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"244128d1-e700-4423-8359-7bd637bf0f5a"},{"version":"CommandV1","origId":1961810187579111,"guid":"9bd0dad3-cfb4-49d1-b6e7-7fbfc3f93f72","subtype":"command","commandType":"auto","position":3.0,"command":"%md\n#### Explanation:\nOur notebook starts with setting up connection information to our Data Lake in ADLS, and our Data Warehouse in Azure SQL DB.  Much of the repetive connection info would be templatized or put in a child notebook for code reuse.  ","commandVersion":1,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585506811656,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"be26836b-32a1-4938-bb94-514dbae7c0c2"},{"version":"CommandV1","origId":1961810187579112,"guid":"8a3f5c2f-98f4-476e-a122-381edf10868d","subtype":"command","commandType":"auto","position":5.0,"command":"%run \"/Dimension Loads/Initialize Connections and Functions\" $BulkInsertTableName_Update=\"\" $BulkInsertTableName_Insert=\"\"","commandVersion":1,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":1585506811772,"submitTime":1585506811772,"finishTime":1585506864973,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"8a93cc2c-f8bf-4805-bc38-356760050e0e"},{"version":"CommandV1","origId":1961810187579113,"guid":"8a2e5360-2a68-4230-9928-d3052925376e","subtype":"script","commandType":"auto","position":5.071428571428571,"command":"","commandVersion":45,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">varBulkInsertTableName_Update: String = &quot;&quot;\nvarBulkInsertTableName_Insert: String = &quot;&quot;\n</div>","arguments":{"BulkInsertTableName_Insert":"","BulkInsertTableName_Update":""},"addedWidgets":{"BulkInsertTableName_Insert":{"widgetType":"text","name":"BulkInsertTableName_Insert","defaultValue":"BulkInsertSchemaName.BulkInsertTableName","label":null,"options":{"widgetType":"text","validationRegex":null}},"BulkInsertTableName_Update":{"widgetType":"text","name":"BulkInsertTableName_Update","defaultValue":"BulkInsertSchemaName.BulkInsertTableName","label":null,"options":{"widgetType":"text","validationRegex":null}}},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155000915,"submitTime":1583445734947,"finishTime":1584155004673,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0e2dd0f2-efab-466c-bda6-fe6f8f49e57b"},{"version":"CommandV1","origId":1961810187579115,"guid":"4b9334cd-43a4-4cfc-b389-c0fcf640d4b9","subtype":"script","commandType":"auto","position":5.142857142857143,"command":"","commandVersion":159,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1583182505725,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"6ae8907f-b327-4c32-8ac3-ab4fab751ed8"},{"version":"CommandV1","origId":1961810187579117,"guid":"a792bb6d-fbd5-4b3d-b532-5e08ac99ca55","subtype":"script","commandType":"auto","position":5.214285714285714,"command":"","commandVersion":44,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1583182505759,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"77b5c1d2-9294-4e38-a584-458a409a4e61"},{"version":"CommandV1","origId":1961810187579119,"guid":"ab4e18a3-1209-4eaa-86f7-f3998c630ff8","subtype":"script","commandType":"auto","position":5.285714285714286,"command":"","commandVersion":128,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">datalake already mounted\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155004690,"submitTime":1583445477384,"finishTime":1584155007731,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"78e1a9df-8ad5-4789-aac9-1643f481ca06"},{"version":"CommandV1","origId":1961810187579121,"guid":"243ff359-f18f-4805-8258-3868cb1e8ebb","subtype":"script","commandType":"auto","position":5.357142857142857,"command":"","commandVersion":8,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155007743,"submitTime":1583184002304,"finishTime":1584155007760,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a41e51f8-4ae5-47ad-8553-e97ba62ba39a"},{"version":"CommandV1","origId":1961810187579123,"guid":"568cdbb6-08d7-4cb2-96ae-7482565a6b89","subtype":"script","commandType":"auto","position":5.428571428571429,"command":"","commandVersion":4,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155007771,"submitTime":1583184175298,"finishTime":1584155007787,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"96082a16-a680-4a70-86bd-ba35c5c9e061"},{"version":"CommandV1","origId":1961810187579125,"guid":"caba24da-4dd6-483c-b3f0-df8d7adadc78","subtype":"script","commandType":"auto","position":5.5,"command":"","commandVersion":12,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1583182505824,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5a18da5a-adc8-419e-abf6-b3180f648975"},{"version":"CommandV1","origId":1961810187579127,"guid":"25a9189f-2d24-427a-b8e8-acdc11e669f9","subtype":"script","commandType":"auto","position":5.571428571428571,"command":"","commandVersion":62,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155007797,"submitTime":1583520078544,"finishTime":1584155009420,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"824f6042-4c72-4085-8f08-b34bfe1843e4"},{"version":"CommandV1","origId":1961810187579129,"guid":"75e51418-f494-4163-919a-1e9e2512e930","subtype":"script","commandType":"auto","position":5.642857142857143,"command":"","commandVersion":21,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1583182505877,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f84df5ef-bd20-4a3a-99c0-88abd8e0b1e9"},{"version":"CommandV1","origId":1961810187579131,"guid":"33721c24-4e24-4851-a8bc-36e964ddd7e2","subtype":"script","commandType":"auto","position":5.714285714285714,"command":"","commandVersion":14,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Out[6]: &lt;function __main__.udfMD5Python(colList)&gt;</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155009443,"submitTime":1583445498009,"finishTime":1584155009496,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2a311fb9-e8c5-4025-a331-e2bd4ff8a3ad"},{"version":"CommandV1","origId":1961810187579133,"guid":"f6a1363d-42b3-4e9a-8a8a-536bfbbd3143","subtype":"script","commandType":"auto","position":5.785714285714286,"command":"","commandVersion":7,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Out[7]: &lt;function __main__.udfSHA1Python(colList)&gt;</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155009518,"submitTime":1583445500257,"finishTime":1584155009555,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"9b618cb3-b6d6-4317-948f-8fa3c9f0545f"},{"version":"CommandV1","origId":1961810187579135,"guid":"d656753c-4ad2-4244-932b-83d5c8b4694e","subtype":"script","commandType":"auto","position":5.857142857142857,"command":"","commandVersion":21,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">import com.microsoft.azure.sqldb.spark.bulkcopy.BulkCopyMetadata\nimport com.microsoft.azure.sqldb.spark.config.Config\nimport com.microsoft.azure.sqldb.spark.connect._\nbulkCopyConfig_Update: com.microsoft.azure.sqldb.spark.config.Config = com.microsoft.azure.sqldb.spark.config.ConfigBuilder$$anon$1@7e5e4e0a\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155009572,"submitTime":1583445520243,"finishTime":1584155011552,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"847b9acb-ad62-4c4b-aae3-dd046fba64a8"},{"version":"CommandV1","origId":1961810187579137,"guid":"b596d623-ed92-4acf-a642-f70eef332911","subtype":"script","commandType":"auto","position":5.928571428571429,"command":"","commandVersion":9,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">import com.microsoft.azure.sqldb.spark.bulkcopy.BulkCopyMetadata\nimport com.microsoft.azure.sqldb.spark.config.Config\nimport com.microsoft.azure.sqldb.spark.connect._\nbulkCopyConfig_Insert: com.microsoft.azure.sqldb.spark.config.Config = com.microsoft.azure.sqldb.spark.config.ConfigBuilder$$anon$1@7e5e4e0a\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1584155011567,"submitTime":1583182505989,"finishTime":1584155013260,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["a05c4332-3717-4905-85fd-7920bd5d2ce4"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5006de7b-8f3f-4a1a-9668-51146b582978"},{"version":"CommandV1","origId":1961810187579139,"guid":"f520f485-2f95-4158-a8ab-b7fc2c2bb449","subtype":"command","commandType":"auto","position":6.0,"command":"# Use the following to list out the parquet file(s) in the staging folder. Typically there should only be a single file\n#dbutils.fs.ls(\"/mnt/datalake/staging/inventory/DB203002/nohalib_tbiaivt\")","commandVersion":21,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585506864970,"submitTime":1585506812009,"finishTime":1585506864989,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b40002ae-63f8-4baf-b40d-a9084e26a9d8"},{"version":"CommandV1","origId":1961810187579141,"guid":"289b0a66-c23c-48da-91fa-e22c7f281d6a","subtype":"command","commandType":"auto","position":6.5,"command":"%md\n\n#### Read the stage parquet file into a dataframe and then immediately create a temporary view with this data","commandVersion":10,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585506812083,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"dd9fe376-2981-4131-9147-6b041a7360a6"},{"version":"CommandV1","origId":1961810187579142,"guid":"0fe8ed89-24a8-4c03-be7b-03d6b7d2bdbf","subtype":"command","commandType":"auto","position":7.0,"command":"# The original version of this notebook used parquet files in the \"staging\" data lake.\n# However, a better method may be to used the \"curated\" data.\n# Comment out the files below once the curated table has taken its place\n\nspark.read \\\n   .parquet(\"/mnt/datalake/staging/inventory/DB203002/nohalib_tbiaivt\") \\\n   .createOrReplaceTempView(\"nohalib_tbiaivt\")","commandVersion":28,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585506864999,"submitTime":1585506812135,"finishTime":1585506875478,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a5b4f7d7-705b-4227-b192-8a241ac6722f"},{"version":"CommandV1","origId":1961810187579143,"guid":"785381cf-f2bf-4ae3-b84e-e9e24aa9adc4","subtype":"command","commandType":"auto","position":7.5,"command":"%md\n\n#### Query the in-memory view(s), apply transformations, and save as a new temporary view named \"Staging\"","commandVersion":26,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585506812196,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"cfe6b9c3-9f75-4012-96e8-81383a725db5"},{"version":"CommandV1","origId":1961810187579144,"guid":"1af20cc5-88af-4f64-954c-bf481255ad4f","subtype":"command","commandType":"auto","position":8.0,"command":"%sql\n\nCREATE OR REPLACE TEMPORARY VIEW staging AS\n\nSELECT\n    snapshot_date,\n    period,\n    CAST(CASE WHEN rectype = 'H' THEN string(int(Period)) || CASE RIGHT(string(int(Period)), 2) WHEN '01' THEN '31'\n                                                                                           WHEN '02' THEN '28'\n                                                                                           WHEN '03' THEN '31'\n                                                                                           WHEN '04' THEN '30'\n                                                                                           WHEN '05' THEN '31'\n                                                                                           WHEN '06' THEN '30'\n                                                                                           WHEN '07' THEN '31'\n                                                                                           WHEN '08' THEN '31'\n                                                                                           WHEN '09' THEN '30'\n                                                                                           WHEN '10' THEN '31'\n                                                                                           WHEN '11' THEN '30'\n                                                                                           WHEN '12' THEN '31' END\n         WHEN rectype = 'M' THEN replace(string(to_date(snapshot_date, 'yyyy-MM-dd')), '-', '')\n         ELSE '19000101'\n    END AS INT) AS Snapshot_Date_fk,\n\tinvqty AS Inventory_Quantity,\n\tinvcost AS Inventory_Cost, \n\tdmgqty AS Damaged_Quantity,\n\tdmgcost AS Damaged_Cost,\n\titem AS SKU_nk,\n    item AS SKU_History_nk,\n    snapshot_date AS SKU_History_Date,\n    string(int(division)) || RIGHT('000' || string(int(pc)), 3) || '-' || RIGHT('00' || string(int(branch)), 2) AS Location_nk,\n\trectype AS Record_Type,\n\tdatatype AS Data_Aggregation_Level,\n\tdatakey AS Data_Version\nFROM nohalib_tbiaivt","commandVersion":1033,"state":"finished","results":{"type":"table","data":[],"arguments":{},"addedWidgets":{},"removedWidgets":[],"schema":[],"overflow":false,"aggData":[],"aggSchema":[],"aggOverflow":false,"aggSeriesLimitReached":false,"aggError":"","aggType":"","plotOptions":null,"isJsonSchema":true,"dbfsResultPath":null,"datasetInfos":[],"columnCustomDisplayInfos":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":1585506875502,"submitTime":1585506812251,"finishTime":1585506875983,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f2b37667-4772-460f-8271-b357fdead128"},{"version":"CommandV1","origId":1961810187579145,"guid":"e5994b2a-dbe0-44b2-9c29-fd8253890977","subtype":"command","commandType":"auto","position":8.2421875,"command":"%md\n\n#### Auto-trim strings\n\nMany of the DB2 character fields come with extra spaces. These should generally all be removed","commandVersion":26,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585506812324,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"9f8923d0-d557-4635-bcfa-8ebed0645606"},{"version":"CommandV1","origId":1961810187579146,"guid":"095f2469-f7a2-4a59-87aa-e3ef7da520a8","subtype":"command","commandType":"auto","position":8.36328125,"command":"from pyspark.sql.functions import *\n\nautotrimStringsDF = spark.table(\"staging\")\n\nfor columnName, columnType in autotrimStringsDF.dtypes:\n  if columnType == \"string\":\n    autotrimStringsDF = autotrimStringsDF.withColumn(columnName, coalesce(trim(col(columnName)), lit(\"\")))","commandVersion":140,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"autotrimStringsDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"snapshot_date","nullable":true,"type":"timestamp"},{"metadata":{},"name":"period","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Snapshot_Date_fk","nullable":true,"type":"integer"},{"metadata":{},"name":"Inventory_Quantity","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Inventory_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Damaged_Quantity","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Damaged_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"SKU_nk","nullable":false,"type":"string"},{"metadata":{},"name":"SKU_History_nk","nullable":false,"type":"string"},{"metadata":{},"name":"SKU_History_Date","nullable":true,"type":"timestamp"},{"metadata":{},"name":"Location_nk","nullable":false,"type":"string"},{"metadata":{},"name":"Record_Type","nullable":false,"type":"string"},{"metadata":{},"name":"Data_Aggregation_Level","nullable":false,"type":"string"},{"metadata":{},"name":"Data_Version","nullable":true,"type":"integer"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585506876004,"submitTime":1585506812379,"finishTime":1585506876290,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c1fa5bf3-b988-4eb4-9516-3bced163ba78"},{"version":"CommandV1","origId":1961810187579147,"guid":"fae6cce7-c4fd-4670-a195-420068572f9b","subtype":"command","commandType":"auto","position":8.484375,"command":"%md\n\n#### Automated dimension surrogate key lookup\n\nKey lookups are often straightforward and a little monotonous. This activity is a good candidate for automation. In the next cell we will have an array that can be tailored. If a field from the staging dataset is in the dimension lookup list, then we will attempt to programatically perform the join to the correct dimension and find the surrogate key.","commandVersion":91,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585506812434,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2d229be3-12b4-4a68-8199-4d05bd623f2c"},{"version":"CommandV1","origId":1961810187579148,"guid":"86d41e62-fec5-4d36-a47c-ffcf9286ac33","subtype":"command","commandType":"auto","position":8.96875,"command":"# list of tuples containing info used by the automated dimension lookup. values are:\n# 1. Staging table's dimension attribute (natural key value)\n# 2. Dimension name (including schema)\n# 3. Dimension table's natural key attribute\n# 4. Dimension primary key attribute\n# 5. Name of the foreign key attribute that will get created in the fact table\n# 6. (Optional, for type 2 dimensions) Name of the dimensions Effective Start Date attribute\n# 7. (Optional, for type 2 dimensions) Name of the dimensions Effective End Date attribute\n# 8. (Optional, for type 2 dimensions) Name of the date attribute in the staging-side data that should get checked against the dimension's start/end effective dates\n\n# Type 2 dimensions are supported if you specify the necessary dates. Fields 6, 7 and 8 are marked optional. However, you cannot include just one or two of these. In other words, each dimension tuple in the array below will either contain five attributes or eight attributes, and nothing in between. Also note that the date field specified in the eight setting will get dropped drop the dataframe when this cell is complete. Do not use a date field that you need to retain. Instead add an extra date field to your query above.\n\n# Note that it is ok for the list below to have dimension info that does not pertain to this fact. If this fact does not use one of the dimensions listed below, the subsequent code basically ignores that dimension\nfrom pyspark.sql import *\nfrom pyspark.sql.functions import *\n\nstagingDF = autotrimStringsDF\n\n# if you suspect that one of the dimension lookups is improperly affecting the dataset rowcount (i.e. because of non-unique join conditions), change this to True\n# This setting will give you before and after rowcounts during each dimension join. However, this comes at a signficant performance cost, so do not leave this enabled indefinitely\ndebugDimensionLookup = False\n\nautomatedDimensionLookupList = [\n  (\"Employee_Entered_nk\", \"DW.Dim_Employee\", \"Employee_ID_nk\", \"Employee_sk\", \"Employee_Entered_fk\"),\n  (\"Location_nk\", \"DW.Dim_Location\", \"Location_Code_nk\", \"Location_sk\", \"Location_fk\"),\n  (\"SKU_nk\", \"DW.Dim_SKU\", \"SKU_Unformatted_nk\", \"SKU_sk\", \"SKU_fk\"),\n  (\"Shipper_nk\", \"DW.Dim_Vendor\", \"Vendor_ID_nk\", \"Vendor_sk\", \"Shipper_fk\"),\n  (\"Shipping_Origin_nk\", \"DW.Dim_ShippingOrigin\", \"Shipping_Origin_Code\", \"Shipping_Origin_sk\", \"Shipping_Origin_fk\"),\n  (\"SKU_History_nk\", \"DW.Dim_SKU_History\", \"SKU_Unformatted_nk\", \"SKU_History_sk\", \"SKU_History_fk\", \"Start_Date\", \"End_Date\", \"SKU_History_Date\")\n]\n\nfor dimensionTuple in automatedDimensionLookupList:\n  for columnName in set(stagingDF.columns) & set([dimensionTuple[0]]):\n    dimensionName = dimensionTuple[1]\n    dimensionNaturalKey = dimensionTuple[2]\n    dimensionPrimaryKey = dimensionTuple[3]\n    factForeignKeyName = dimensionTuple[4]\n    if len(dimensionTuple) > 5:\n      type2StartDate = dimensionTuple[5]\n      type2EndDate = dimensionTuple[6]\n      stagingDate = dimensionTuple[7]\n    \n    if len(dimensionTuple) > 5:\n      dimensionType = 2 # Kimball-style type 2 dimension (dimension rows are effective dated)\n    else:\n      dimensionType = 1 # Kimball-style type 1 dimension (dimension retains no history and shows current state only)\n    \n    columnList = \"[\" + dimensionPrimaryKey + \"] AS dim_lookup_primary_key, [\" + dimensionNaturalKey + \"] AS dim_lookup_natural_key\"\n      \n    if dimensionType == 1:\n      dimensionSelectQuery = \"(SELECT \" + columnList + \" FROM \" + dimensionName + \") dim\"\n    else:\n      dimensionSelectQuery = \"(SELECT \" + columnList + \", \" + type2StartDate + \", \" + type2EndDate + \" FROM \" + dimensionName + \") dim\"\n      \n    dimDF = spark.read.jdbc(url=jdbcUrl, table=dimensionSelectQuery, properties=connectionProperties)\n\n    # check the pre-join rowcount\n    if debugDimensionLookup == True:\n      preJoinRowCount = stagingDF.count()\n      # Uncomment the line below for extra debugging info\n      #print(\"Pre \" + columnName + \" join rowcount:  \" + str(preJoinRowCount))\n      \n    # joins are performed differently depending on the dimension type (1 vs 2)\n    if dimensionType == 1:\n      stagingDF = stagingDF.alias(\"staging\") \\\n        .join(dimDF.alias(\"dim\"), stagingDF[columnName] == dimDF[\"dim_lookup_natural_key\"], how=\"leftouter\")\n    else:\n      stagingDF = stagingDF.alias(\"staging\") \\\n        .join(dimDF.alias(\"dim\"), \n                (stagingDF[columnName] == dimDF[\"dim_lookup_natural_key\"]) & \n                (stagingDF[stagingDate] >= dimDF[type2StartDate]) & \n                (stagingDF[stagingDate] < dimDF[type2EndDate]), how=\"leftouter\"\n             )\n      \n    # select everything from the staging side plus the new dimension primary key (and natural key for optional debugging a few statements later)\n    # rename the original natural key column from the staging dataset (we will potentially use this column if we run the debugging code)\n    # rename the dimension primary key to whatever we'll call it in the staging dataset\n    # and enforce the unknown key (0) in the event that the lookup failed to return any value\n    stagingDF = stagingDF \\\n        .select(\"staging.*\", dimDF[\"dim_lookup_primary_key\"], dimDF[\"dim_lookup_natural_key\"]) \\\n        .withColumnRenamed(columnName, \"original_staging_side_natural_key_column\") \\\n        .withColumnRenamed(\"dim_lookup_primary_key\", factForeignKeyName) \\\n        .withColumn(factForeignKeyName, coalesce(col(factForeignKeyName), lit(0))) # if the join fails to return a surrogate key, assign a default value (0)\n\n    # check the post-join rowcount (check now before we drop the natural keys so that we have access to potentially detect which natural key is causing an issue)\n    if debugDimensionLookup == True:\n      postJoinRowCount = stagingDF.count()\n      # Uncomment the line below for extra debugging info\n      #print(\"Post \" + columnName + \" join rowcount: \" + str(postJoinRowCount))\n      if postJoinRowCount - preJoinRowCount != 0:\n        print(\"!!! Problem detected in \" + columnName + \" join.\")\n        # Uncomment out the following to see which natural key(s) are causing an issue\n        #distinctDimensionKeys = dimDF.select(\"dim_lookup_natural_key\", \"dim_lookup_primary_key\").distinct().alias(\"dim\")\n        #display(stagingDF.select(\"original_staging_side_natural_key_column\").distinct() \\\n        #         .join(distinctDimensionKeys, stagingDF[\"original_staging_side_natural_key_column\"] == dimDF[\"dim_lookup_natural_key\"]) \\\n        #         .groupBy(dimDF[\"dim_lookup_natural_key\"]).agg(count(\"*\").alias(\"natural_key_count\")).filter(col(\"natural_key_count\") > 1)\n        #      )  \n    \n    # we only hung on the natural keys this long in case we wanted to use it within the debugging code above. now it's safe to drop\n    stagingDF = stagingDF \\\n        .drop(\"dim_lookup_natural_key\") \\\n        .drop(\"original_staging_side_natural_key_column\")\n    \n    if dimensionType == 2:\n      stagingDF = stagingDF.drop(stagingDF[stagingDate])\n\n        ","commandVersion":1584,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"dimDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"dim_lookup_primary_key","nullable":true,"type":"integer"},{"metadata":{},"name":"dim_lookup_natural_key","nullable":true,"type":"string"},{"metadata":{},"name":"Start_Date","nullable":true,"type":"date"},{"metadata":{},"name":"End_Date","nullable":true,"type":"date"}],"type":"struct"},"tableIdentifier":null},{"name":"stagingDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"snapshot_date","nullable":true,"type":"timestamp"},{"metadata":{},"name":"period","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Snapshot_Date_fk","nullable":true,"type":"integer"},{"metadata":{},"name":"Inventory_Quantity","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Inventory_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Damaged_Quantity","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Damaged_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Record_Type","nullable":false,"type":"string"},{"metadata":{},"name":"Data_Aggregation_Level","nullable":false,"type":"string"},{"metadata":{},"name":"Data_Version","nullable":true,"type":"integer"},{"metadata":{},"name":"Location_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_History_fk","nullable":false,"type":"integer"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585506886357,"submitTime":1585506886256,"finishTime":1585506886931,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"html","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"23e9e792-afab-4f72-99aa-e48c550a7dc9"},{"version":"CommandV1","origId":1961810187579149,"guid":"6c2c2756-16fc-4cac-a7b8-78a1e54ed192","subtype":"command","commandType":"auto","position":9.453125,"command":"%md\n\n#### Manual dimension surrogate key lookup\n\n","commandVersion":13,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585087816538,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"557c3df4-a3c3-4c3a-a012-baf392ed2881"},{"version":"CommandV1","origId":1961810187579150,"guid":"322978ed-0450-42a5-a5dc-553e3155b8f5","subtype":"command","commandType":"auto","position":9.9375,"command":"%md\n\n#### Calculate hashes and add other metadata\n\nSome fact ETL designs rely on being able to uniquely identify each fact row. Support for unique row identification comes in this form of hashing. There are two hashes that will be calculated. One hashes the natural keys and provides a value that uniquely identifies the fact row. The other hashes all other columns and lets us identify if something on the row changed.\n\nOther fact ETL designs either don't need or cannot support unique row identification. Sometimes limitations from the source data restrict our ability to uniquely identify each row. In other cases, the fact ETL calls for wiping and reload broad units of data, an entire month, or year, or even all data in the entire fact table.\n\nUse the flag \"includeHashSupport\" to activate the code necessary to add and debug these two hash values.","commandVersion":180,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585087816570,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"03c13546-8fd4-4d4c-b9e9-aa6f017aa3f4"},{"version":"CommandV1","origId":1961810187579151,"guid":"1fb475b6-1ac2-4dea-a767-d10571669bdb","subtype":"command","commandType":"auto","position":10.875,"command":"from pyspark.sql.functions import *\n\nincludeHashSupport = False\n\nif includeHashSupport == True:\n\n  # IMPORTANT! The array below must contain all the columns that collectively form the natural key of each row\n  # Be careful! These lists are CASE SENSITIVE\n  naturalKeyColumnList = [\"snapshot_date_key\", \"SKU_nk\", \"Location_nk\"]\n  \n  #naturalKeyColumnList = [\"SKU_fk\", \"Location_fk\", \"Shipper_fk\", \"Shipping_Origin_fk\", \"Employee_Entered_fk\", \"Transaction_Link_fk\"]\n  # We will also hash all the non-key columns. This hash is the \"Row Value Hash\". A change to any of these columns in an existing row will trigger a new row version (with the old row no longer effective). In the event that there are columns that we DON'T want to trigger a new row, add them to this exception list:\n  exceptionValueColumnList = []\n  \n  # Set the following flag to true to test for non-uniqueness in the natural key\n  # If the natural key (which is assigned above) does not provide a unique key to every single row, unexpected behavior can possibly occur during updates to the fact table\n  debugHashCalculation = False\n  \n  # take these two arrays and produce a list of the value columns (i.e. the non-key columns)\n  valueColumnList = set(stagingDF.columns) - set(naturalKeyColumnList) - set(exceptionValueColumnList)\n  \n  withMetadataDF = stagingDF \\\n    .withColumn(\"Key_Hash\", sha2(concat_ws(\"||\", *[col(columnName) for columnName in set(stagingDF.columns) & set(naturalKeyColumnList)]), 256)) \\\n    .withColumn(\"Row_Value_Hash\", sha2(concat_ws(\"||\", *[col(columnName) for columnName in set(stagingDF.columns) & set(valueColumnList)]), 256))\n  \n  if debugHashCalculation == True:\n    # group by the supposedly unique Key_Hash column and look for times when the same Key_Hash is used by more than one row\n    keyHashNonuniqueDF = withMetadataDF.groupBy(\"Key_Hash\").agg(count(\"*\").alias(\"Key_Hash_Count\")).filter(col(\"Key_Hash_Count\") > 1)\n    keyHashNonuniqueCount = keyHashNonuniqueDF.count()\n    if keyHashNonuniqueCount > 0:\n      print(str(keyHashNonuniqueCount) + \" row(s) have a non-unique Key_Hash value due to non-unique natural keys being supplied to the hash function.\")\n      # join the list of non-unique hashes back with the original dataset, to show all the rows that will be affected by the problems caused by non-unique keys\n      # uncomment out the line below to see this list of offending keys\n      #display(withMetadataDF.alias(\"withMetadata\").join(keyHashNonuniqueDF.alias(\"nonunique\"), withMetadataDF.Key_Hash == keyHashNonuniqueDF.Key_Hash, how=\"inner\").select(\"withMetadata.*\"))\nelse:\n  withMetadataDF = stagingDF\n  \n# regardless of whether we are calculating hashes or not, add the other metadata columns\nwithMetadataDF = withMetadataDF \\\n  .withColumn(\"ETLBatchID_Insert\", lit(masterProcessNumber)) \\\n  .withColumn(\"ETLBatchID_Update\", lit(masterProcessNumber)) ","commandVersion":839,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"withMetadataDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"snapshot_date","nullable":true,"type":"timestamp"},{"metadata":{},"name":"period","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Snapshot_Date_fk","nullable":true,"type":"integer"},{"metadata":{},"name":"Inventory_Quantity","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Inventory_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Damaged_Quantity","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Damaged_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Record_Type","nullable":false,"type":"string"},{"metadata":{},"name":"Data_Aggregation_Level","nullable":false,"type":"string"},{"metadata":{},"name":"Data_Version","nullable":true,"type":"integer"},{"metadata":{},"name":"Location_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_History_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"ETLBatchID_Insert","nullable":false,"type":"string"},{"metadata":{},"name":"ETLBatchID_Update","nullable":false,"type":"string"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585087826322,"submitTime":1585087816622,"finishTime":1585087826357,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"html","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2ead0fd3-d51a-47b0-be5b-9c218e576b0f"},{"version":"CommandV1","origId":1961810187579152,"guid":"32b34fe0-882a-4036-a0b7-b5658155f0ea","subtype":"command","commandType":"auto","position":11.34375,"command":"%md\n\n#### Prevent duplicates caused by malformed dimension lookups\n\nWhen the dimension lookups operate correctly, they should not change the number of rows within the incoming data. However, a join against a non-unique field within the dimension could potentially cause a single staging row to be joined to more than one dimension row, skewing the amounts that are ultimately loaded into the fact table. As a final safety check to prevent this from happening and causing issues in the fact table, we will group by the natural key of the fact and randomly throw out duplicates.\n\nIf this situation is occurring, the root cause must be identified and addressed.","commandVersion":121,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585087816648,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"571f9675-da2b-48b2-848a-9b3a8e2b89e2"},{"version":"CommandV1","origId":1961810187579153,"guid":"2ae257bf-4a6d-4d19-942b-6df4e8420384","subtype":"command","commandType":"auto","position":11.578125,"command":"from pyspark.sql.window import *\n\nif includeHashSupport == True:\n    # set the following to True to check to see whether any rows are being dropped\n    debugDuplicateDetection = False\n    \n    if debugDuplicateDetection == True:\n      beforeDuplicateDetectionCount = withMetadataDF.count()\n    \n    identifyFactDuplicates = Window.partitionBy(\"Key_Hash\").orderBy(col(\"Row_Value_Hash\").desc())\n    addRowNumberDF = withMetadataDF.select(\"*\", row_number().over(identifyFactDuplicates).alias(\"duplicate_detection_row_number\"))\n    \n    afterDuplicatesDroppedDF = addRowNumberDF.filter(\"duplicate_detection_row_number = 1\").drop(\"duplicate_detection_row_number\")\n    droppedRowsDF = addRowNumberDF.filter(\"duplicate_detection_row_number > 1\")\n    \n    if debugDuplicateDetection == True:\n      afterDuplicateDetectionCount = afterDuplicatesDroppedDF.count()\n      countOfRowsDropped = beforeDuplicateDetectionCount - afterDuplicateDetectionCount\n      if countOfRowsDropped > 0:\n        print(\"!!! Dropping \" + str(countOfRowsDropped) + \" row(s) due to duplicate Key_Hash values.\")\n        # uncomment out the following line to see the rows that are being dropped \n        #display(droppedRowsDF)\n      else:\n        print(\"No rows are being dropped. The Key_Hash appears to be unique for all rows.\")","commandVersion":272,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585087826363,"submitTime":1585087816679,"finishTime":1585087826389,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4e1fa976-48c0-48fe-9ef8-ff76405d3207"},{"version":"CommandV1","origId":1961810187579154,"guid":"2b977ba5-4152-49de-bf32-a45b40ba2291","subtype":"command","commandType":"auto","position":11.6953125,"command":"# add/remove some final columns\n\nif includeHashSupport == True:\n   finalDF = afterDuplicatesDroppedDF \\\n     .withColumnRenamed(\"Snapshot_Effective_Date\", \"Snapshot_StartDate\") \\\n     .withColumn(\"Snapshot_EndDate\", to_date(lit(\"9999-12-31\"))) \\\n     .withColumn(\"Snapshot_Current_Flag\", lit(1))\nelse:\n  finalDF = withMetadataDF\n  \nfinalDF = finalDF \\\n  .withColumn(\"SourceSystem_fk\", lit(0)) \\\n  .drop(\"snapshot_date\") \\\n  .drop(\"period\")\n  \n","commandVersion":75,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"finalDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Snapshot_Date_fk","nullable":true,"type":"integer"},{"metadata":{},"name":"Inventory_Quantity","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Inventory_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Damaged_Quantity","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Damaged_Cost","nullable":true,"type":"decimal(38,18)"},{"metadata":{},"name":"Record_Type","nullable":false,"type":"string"},{"metadata":{},"name":"Data_Aggregation_Level","nullable":false,"type":"string"},{"metadata":{},"name":"Data_Version","nullable":true,"type":"integer"},{"metadata":{},"name":"Location_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"SKU_History_fk","nullable":false,"type":"integer"},{"metadata":{},"name":"ETLBatchID_Insert","nullable":false,"type":"string"},{"metadata":{},"name":"ETLBatchID_Update","nullable":false,"type":"string"},{"metadata":{},"name":"SourceSystem_fk","nullable":false,"type":"integer"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585087826394,"submitTime":1585087816704,"finishTime":1585087826422,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4c6e0b19-88c2-4e8b-ac23-7f8d22b8f346"},{"version":"CommandV1","origId":1961810187579155,"guid":"107f1bbe-f325-403a-86c1-e7a1dbc414c4","subtype":"command","commandType":"auto","position":11.8125,"command":"%md\n\n#### Prep the fact table prior to load\n\nDepending on the fact loading strategy, this step could take different forms:\n\n- Delete entire periods and reload from the incoming staging data (periodic snapshot)\n- Delete specific fact rows and reload from the incoming staging data\n- Expire fact rows and load new incoming staging data (temporal snapshot)\n\nNote that any deletes or update against the fact table will take place in Azure SQL, outside Databricks. For performance reasons, we will be using the Azure Spark Connector to connect to Azure SQL and execute the deletes. This connector is currently only available to use via Spark's Scala API. Hence the next steps will be performed in Scala.","commandVersion":102,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585087816730,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"85e5fb39-4373-4951-8f8d-cdfc518fa731"},{"version":"CommandV1","origId":1961810187579156,"guid":"8b40eb6c-b4e3-41bf-97a1-a756333f1a01","subtype":"command","commandType":"auto","position":12.046875,"command":"%md\n\n#### Delete entire periods and reload\n\nThis is often the simplest fact ETL design. Instead of surgically trying to upsert individual fact rows, we are clearing out and reloading large chunks of data. The most extreme form of this type of fact loading is to truncate and reload the entire fact table each run.","commandVersion":84,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585087816798,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b6d8dd12-4a40-42ba-b0c0-8d8181c59208"},{"version":"CommandV1","origId":1961810187579157,"guid":"368ddc94-f644-46c7-a804-c6ada42dda31","subtype":"command","commandType":"auto","position":14.5,"command":"%scala\n\n// We will use the Azure Spark Connector to perform database deletes. This neccessitates dropping into Scala for this operation.\n\nimport com.microsoft.azure.sqldb.spark.config.Config\nimport com.microsoft.azure.sqldb.spark.query._\nimport org.apache.spark.sql.functions._\n\n\nval DeleteQuery = \"DELETE Fact_InventorySnapshot FROM Inventory.Fact_InventorySnapshot INNER JOIN Updates.temp_insert_Fact_InventorySnapshot ON Fact_InventorySnapshot.Snapshot_Date_fk = temp_insert_Fact_InventorySnapshot.Snapshot_Date_fk\"\n\n\nval deleteStatement = Config(Map(\n  \"url\"          -> dbutils.secrets.get(scope = \"key-vault-secrets\", key = \"HavertysDWServerName\"),\n  \"databaseName\" -> dbutils.secrets.get(scope = \"key-vault-secrets\", key = \"HavertysDWDBName\"),\n  \"user\"         -> \"ETL\",\n  \"password\"     -> dbutils.secrets.get(scope = \"key-vault-secrets\", key = \"HavertysDWETLAccountPassword\"),\n  \"queryCustom\"  -> DeleteQuery\n))\n\nsqlContext.sqlDBQuery(deleteStatement)\n","commandVersion":79,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">import com.microsoft.azure.sqldb.spark.config.Config\nimport com.microsoft.azure.sqldb.spark.query._\nimport org.apache.spark.sql.functions._\nDeleteQuery: String = DELETE Fact_InventorySnapshot FROM Inventory.Fact_InventorySnapshot INNER JOIN Updates.temp_insert_Fact_InventorySnapshot ON Fact_InventorySnapshot.Snapshot_Date_fk = temp_insert_Fact_InventorySnapshot.Snapshot_Date_fk\ndeleteStatement: com.microsoft.azure.sqldb.spark.config.Config = com.microsoft.azure.sqldb.spark.config.ConfigBuilder$$anon$1@6bb6738f\nres9: Either[org.apache.spark.sql.DataFrame,Boolean] = Right(true)\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585087840510,"submitTime":1585087816860,"finishTime":1585087847426,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"da088caf-6736-4569-b3b1-f6dc65da887e"},{"version":"CommandV1","origId":1961810187579163,"guid":"08c19c75-e8a8-40c1-a1ff-14157f615487","subtype":"command","commandType":"auto","position":26.0,"command":"%md\n\n#### Insert rows into the fact table","commandVersion":23,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585087816997,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"54e8a22f-85a2-444d-ab89-277f7fddf356"},{"version":"CommandV1","origId":1961810187579164,"guid":"75573cb7-e530-4ecd-ad03-624e658d4990","subtype":"command","commandType":"auto","position":27.0,"command":"finalDF.write.jdbc(url=jdbcUrl, table=\"Inventory.Fact_InventorySnapshot\", mode=\"append\", properties=connectionProperties) ","commandVersion":23,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"Command skipped","error":null,"workflows":[],"startTime":1585087847919,"submitTime":1585087817027,"finishTime":1585087890912,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e30ec20a-6a10-41a5-b5ae-e0303356afe6"},{"version":"CommandV1","origId":3011472497722681,"guid":"0bcac2c0-361a-4dab-b2e1-bbddff512b89","subtype":"command","commandType":"auto","position":13.2734375,"command":"# The Inventory Snapshot fact table contains a number of snapshots. Each snapshot is a complete record of inventory as of that particular snapshot date. The field in the fact table is called Snapshot_Date_fk. If the staging data is for a snapshot date that the fact table doesn't already have, then we can just insert the data and be done. However, if the fact table already has data with the same snapshot date as is in staging, first delete all rows with that snapshot date from the fact table. We'll do this by inserting all distinct snapshot dates within the staging data into a temporary table in Azure SQL, and then issue a delete command against the fact table.\n\nsnapshotDatesInStagingDF = finalDF.select(\"Snapshot_Date_fk\").distinct()\n\n# take advantage of the behavior of the \"overwrite\" mode which drops and recreates the target table automatically.\n# this allows us to avoid explicitly creating the table, it makes sure the table schema is always compatible with the data frame, and it makes sure the data is cleared out from any prior run\nsnapshotDatesInStagingDF.write.jdbc(url=jdbcUrl, table=\"Updates.temp_insert_Fact_InventorySnapshot\", mode=\"overwrite\", properties=connectionProperties) \n","commandVersion":256,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"snapshotDatesInStagingDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Snapshot_Date_fk","nullable":true,"type":"integer"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585087826428,"submitTime":1585087816836,"finishTime":1585087840497,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"dbarnhart@havertys.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"844a5059-3317-4251-9298-df7a4415d9e3"},{"version":"CommandV1","origId":3891986763829540,"guid":"c73070db-1ea4-49e2-9934-8ffedc1b1346","subtype":"script","commandType":"auto","position":5.071428571428571,"command":"","commandVersion":45,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">varBulkInsertTableName_Update: String = &quot;&quot;\nvarBulkInsertTableName_Insert: String = &quot;&quot;\n</div>","arguments":{"BulkInsertTableName_Insert":"","BulkInsertTableName_Update":""},"addedWidgets":{"BulkInsertTableName_Insert":{"widgetType":"text","name":"BulkInsertTableName_Insert","defaultValue":"BulkInsertSchemaName.BulkInsertTableName","label":null,"options":{"widgetType":"text","validationRegex":null}},"BulkInsertTableName_Update":{"widgetType":"text","name":"BulkInsertTableName_Update","defaultValue":"BulkInsertSchemaName.BulkInsertTableName","label":null,"options":{"widgetType":"text","validationRegex":null}}},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585506854402,"submitTime":1585244856752,"finishTime":1585506857868,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8a3f5c2f-98f4-476e-a122-381edf10868d"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0e2dd0f2-efab-466c-bda6-fe6f8f49e57b"},{"version":"CommandV1","origId":3891986763829541,"guid":"9c950517-0057-4d84-975e-9b01d1cce574","subtype":"script","commandType":"auto","position":5.142857142857143,"command":"","commandVersion":159,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585244856780,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8a3f5c2f-98f4-476e-a122-381edf10868d"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"6ae8907f-b327-4c32-8ac3-ab4fab751ed8"},{"version":"CommandV1","origId":3891986763829542,"guid":"1e247bb1-c5ba-45e7-82ab-2c5024bac19e","subtype":"script","commandType":"auto","position":5.214285714285714,"command":"","commandVersion":44,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585244856815,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8a3f5c2f-98f4-476e-a122-381edf10868d"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"77b5c1d2-9294-4e38-a584-458a409a4e61"},{"version":"CommandV1","origId":3891986763829543,"guid":"fd116d3d-c8ef-42b5-b491-c274509f9fd7","subtype":"script","commandType":"auto","position":5.285714285714286,"command":"","commandVersion":138,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">datalake already mounted\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"java.rmi.RemoteException: java.lang.IllegalArgumentException: requirement failed: Directory already mounted: /mnt/datalake; nested exception is: ","error":null,"workflows":[],"startTime":1585506857886,"submitTime":1585244962342,"finishTime":1585506859512,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8a3f5c2f-98f4-476e-a122-381edf10868d"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"78e1a9df-8ad5-4789-aac9-1643f481ca06"},{"version":"CommandV1","origId":3891986763829544,"guid":"377c3576-c57f-4158-a3d8-0671b3a0bb98","subtype":"script","commandType":"auto","position":5.357142857142857,"command":"","commandVersion":8,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585506859530,"submitTime":1585244856900,"finishTime":1585506859551,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8a3f5c2f-98f4-476e-a122-381edf10868d"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a41e51f8-4ae5-47ad-8553-e97ba62ba39a"},{"version":"CommandV1","origId":3891986763829545,"guid":"117b631c-3d49-47ca-8e31-f20b8b1cef04","subtype":"script","commandType":"auto","position":5.428571428571429,"command":"","commandVersion":4,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585506859567,"submitTime":1585244856926,"finishTime":1585506859583,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8a3f5c2f-98f4-476e-a122-381edf10868d"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"96082a16-a680-4a70-86bd-ba35c5c9e061"},{"version":"CommandV1","origId":3891986763829546,"guid":"ec39dbb5-d25d-4632-b042-93d448ce4e46","subtype":"script","commandType":"auto","position":5.5,"command":"","commandVersion":12,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585244856959,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8a3f5c2f-98f4-476e-a122-381edf10868d"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5a18da5a-adc8-419e-abf6-b3180f648975"},{"version":"CommandV1","origId":3891986763829547,"guid":"3868c640-7bd8-4b70-a981-23a9f9ed74ed","subtype":"script","commandType":"auto","position":5.571428571428571,"command":"","commandVersion":62,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585506859593,"submitTime":1585244856994,"finishTime":1585506861016,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8a3f5c2f-98f4-476e-a122-381edf10868d"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"824f6042-4c72-4085-8f08-b34bfe1843e4"},{"version":"CommandV1","origId":3891986763829548,"guid":"8cf5ce79-093f-4f68-b8fe-d79cf15456d0","subtype":"script","commandType":"auto","position":5.642857142857143,"command":"","commandVersion":21,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1585244857021,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8a3f5c2f-98f4-476e-a122-381edf10868d"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f84df5ef-bd20-4a3a-99c0-88abd8e0b1e9"},{"version":"CommandV1","origId":3891986763829549,"guid":"69fd63be-e8b6-4d92-a969-de9d7338a907","subtype":"script","commandType":"auto","position":5.714285714285714,"command":"","commandVersion":14,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Out[6]: &lt;function __main__.udfMD5Python(colList)&gt;</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585506861033,"submitTime":1585244857057,"finishTime":1585506861088,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8a3f5c2f-98f4-476e-a122-381edf10868d"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2a311fb9-e8c5-4025-a331-e2bd4ff8a3ad"},{"version":"CommandV1","origId":3891986763829550,"guid":"7a5bb91e-da76-49b4-8d68-4547b717effe","subtype":"script","commandType":"auto","position":5.785714285714286,"command":"","commandVersion":7,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Out[7]: &lt;function __main__.udfSHA1Python(colList)&gt;</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1585506861103,"submitTime":1585244857084,"finishTime":1585506861142,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8a3f5c2f-98f4-476e-a122-381edf10868d"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"9b618cb3-b6d6-4317-948f-8fa3c9f0545f"},{"version":"CommandV1","origId":3891986763829551,"guid":"90a89b44-f069-4792-a2f7-1e6a5f689f97","subtype":"script","commandType":"auto","position":5.857142857142857,"command":"","commandVersion":21,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">import com.microsoft.azure.sqldb.spark.bulkcopy.BulkCopyMetadata\nimport com.microsoft.azure.sqldb.spark.config.Config\nimport com.microsoft.azure.sqldb.spark.connect._\nbulkCopyConfig_Update: com.microsoft.azure.sqldb.spark.config.Config = com.microsoft.azure.sqldb.spark.config.ConfigBuilder$$anon$1@7e5e4e0a\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<div class=\"ansiout\">command-787803810529797:8: error: not found: value varBulkInsertTableName_Update\n  &quot;dbTable&quot;      -&gt; varBulkInsertTableName_Update,\n                    ^\n</div>","error":null,"workflows":[],"startTime":1585506861157,"submitTime":1585244857116,"finishTime":1585506863334,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8a3f5c2f-98f4-476e-a122-381edf10868d"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"847b9acb-ad62-4c4b-aae3-dd046fba64a8"},{"version":"CommandV1","origId":3891986763829552,"guid":"2629c0e6-98bc-423a-b76d-c5dfb953d9fe","subtype":"script","commandType":"auto","position":5.928571428571429,"command":"","commandVersion":9,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">import com.microsoft.azure.sqldb.spark.bulkcopy.BulkCopyMetadata\nimport com.microsoft.azure.sqldb.spark.config.Config\nimport com.microsoft.azure.sqldb.spark.connect._\nbulkCopyConfig_Insert: com.microsoft.azure.sqldb.spark.config.Config = com.microsoft.azure.sqldb.spark.config.ConfigBuilder$$anon$1@7e5e4e0a\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<div class=\"ansiout\">command-787803810529798:8: error: not found: value varBulkInsertTableName_Insert\n  &quot;dbTable&quot;      -&gt; varBulkInsertTableName_Insert,\n                    ^\n</div>","error":null,"workflows":[],"startTime":1585506863352,"submitTime":1585244857152,"finishTime":1585506864958,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["8a3f5c2f-98f4-476e-a122-381edf10868d"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lfurlong@blue-granite.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5006de7b-8f3f-4a1a-9668-51146b582978"},{"version":"CommandV1","origId":795787307141586,"guid":"2a1c7bcc-2993-4d47-b579-793e2805a7df","subtype":"command","commandType":"auto","position":0.75,"command":"%md\n\nThis notebook follows a common code pattern for fact table-loading. The intention of this notebook was to be a template that could serve the majority of the fact table ETL for Havertys.\n\nThe overall structure of the notebook:\n>1. Read in relevant staging data and create temporary views within Databricks\n>2. Using SQL, pull together the staging data and apply the necessary transformations to prepare the data for the fact table (combining colunns, applying business logic, data cleansing)\n>3. Replace natural keys with the staging dataset with respective dimension surrogate keys (this step is mostly automated)\n>4. If the ETL for this fact table needs to be able to isolate and update individual fact rows, then create hashes to represent the data within the row and check that the \"Key_Hash\" truly provides a unique identifier within the staging dataset (mostly automated)\n>5. Perform any last-moment actions against the fact table (this could mean truncating the entire table prior to a full reload, or deleting a single period prior to reloading that period, or expiring specific rows in a snapshot fact).\n>6. Insert (or update, for certain types of fact tables) the incoming staging data\n\nThe notebook attempts to automate several routine ETL activities. The dimension surrogate key lookup is the primray example, along with the hash calculation. In order to automate these steps, the notebook needs to be fed a little metadata/info about the fact table.\n\n##### Key Customizations\n\nAny portion of the notebook can be adjusted as necessary. This is supposed to be a template, not a strict rulebook. However, there are a few key areas that will almost certainly need to be adjusted when the notebook is adapted to a new fact table:\n\n>- The initial \"staging\" query, which runs against either curated tables or Parquet files that are read in as temporary views\n>- The set of tuples assigned to the **automatedDimensionLookupList** variable. This controls the dimension key lookups.\n>- If the fact ETL makes use of the hashing functionality, the **naturalKeyColumnList** variable is a comma-separate list of the attributes that comprise the unique natural key of each staging row\n>- Fact able prepartions (prior to loading the incoming staging rows)\n>- The final insert into the fact table (must specify the fact table name here)\n\n\n##### Debugging\n\nSeveral cells contain a \"debugging\" variable. This is a variable that, when set to true, will activate some additional code in the cell that attempts to check for common issues. For instance, the dimension key lookup cell contains a variable called \"debugDimensionLookup\". This is normally set to False. Setting it to True will cause the cell to take a rowcount both before and after it performs the join against each dimension. If it detects a change in rowcount, then it will list which dimension join caused an issue. Often, there is additional code (the creation and display of another dataframe) that can be uncommented out to provide even more debugging information.\n\nThe main debugging variables are:\n\n- debugDimensionLookup\n- debugHashCalculation\n- debugDuplicateDetection\n","commandVersion":1,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c064ae23-c584-4de7-be01-bd0ae9007652"}],"dashboards":[],"guid":"d383d20a-fd34-465a-8fff-120117aacf40","globalVars":{},"iPythonMetadata":null,"inputWidgets":{"MasterProcessNumber":{"nuid":"b98c57b4-4556-44af-8020-7c06d7fda097","currentValue":"0","widgetInfo":{"widgetType":"text","name":"MasterProcessNumber","defaultValue":"0","label":null,"options":{"widgetType":"text","validationRegex":null}}}}}